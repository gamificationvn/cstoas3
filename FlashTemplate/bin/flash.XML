<?xml version="1.0"?>
<doc>
    <assembly>
        <name>flash</name>
    </assembly>
    <members>
        <member name="M:flash.utils.IExternalizable.readExternal(flash.utils.IDataInput)">
            <summary>
            A class implements this method to decode itself from a data stream by calling the methods of the IDataInput interface.
            </summary>
        </member>
        <member name="M:flash.utils.IExternalizable.writeExternal(flash.utils.IDataOutput)">
            <summary>
            A class implements this method to encode itself for a data stream by calling the methods of the IDataOutput interface.
            </summary>
        </member>
        <member name="M:System.Object.hasOwnProperty(System.String)">
            <summary>
            Indicates whether an object has a specified property defined.
            </summary>
            <param name="pName">The property of the object.</param>
            <returns>If the target object has the property specified by the name parameter this value is <c>true</c>, otherwise <c>false</c></returns>
        </member>
        <member name="M:System.Object.isPrototypeOf(System.Object)">
            <summary>
            Indicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.
            </summary>
            <param name="pTheClass">The class to which the specified object may refer.</param>
            <returns>If the object is in the prototype chain of the object specified by the theClass parameter this value is <c>true</c>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Object.propertyIsEnumerable(System.String)">
            <summary>
            Indicates whether the specified property exists and is enumerable.
            </summary>
            <param name="pName">The property of the object.</param>
            <returns>If the property specified by the name parameter is enumerable this value is <c>true</c>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Object.setPropertyIsEnumerable(System.String,System.Boolean)">
            <summary>
            Sets the availability of a dynamic property for loop operations. The property must exist on the target object because this method does not check the target object's prototype chain.
            </summary>
            <param name="pName">The property of the object.</param>
            <param name="pIsEnum">If set to <c>false</c>, the dynamic property does not show up in for..in loops, and the method <see cref="!:PropertyIsEnumerable"/>() returns <c>false</c></param>
        </member>
        <member name="M:System.Object.toString">
            <summary>
            Returns the string representation of the specified object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Object.valueOf">
            <summary>
            Returns the primitive value of the specified object. If this object does not have a primitive value, the object itself is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:flash.system.Security.loadPolicyFile(System.String)">
            <summary>
            [static] Loads a cross-domain policy file from a location specified by the url parameter.
            </summary>
        </member>
        <member name="M:flash.system.Security.allowDomain(System.String)">
            <summary>
            This method applies to cross-scripting of ActionScript 3.0 code (in SWF content).
            </summary>
            <param name="domains"></param>
        </member>
        <member name="M:flash.system.Security.allowInsecureDomain(System.String)">
            <summary>
            This method applies to cross-scripting of ActionScript 3.0 code (in SWF content).
            </summary>
            <param name="domains"></param>
        </member>
        <member name="M:flash.system.Security.showSettings">
            <summary>
            Displays the Security Settings panel in Flash Player.
            </summary>
        </member>
        <member name="P:flash.system.Security.exactSettings">
            <summary>
            Determines how Flash Player or AIR chooses the domain to use for certain content settings, including settings for camera and microphone permissions, storage quotas, and storage of persistent shared objects.
            </summary>
        </member>
        <member name="P:flash.system.Security.sandboxType">
            <summary>
            Indicates the type of security sandbox in which the calling file is operating.
            </summary>
        </member>
        <member name="M:flash.events.IEventDispatcher.addEventListener(System.String,flash.events.EventHandler)">
            <summary>
            Registers an event listener object with an <see cref="T:flash.events.EventDispatcher"/> object so that the listener receives notification of an event.
            </summary>
            <param name="pType">The type of event.</param>
            <param name="pHandler">The listener function that processes the event. This function must accept an event object as its only parameter and must return nothing.</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.addEventListener(System.String,flash.events.EventHandler,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Registers an event listener object with an <see cref="T:flash.events.EventDispatcher"/> object so that the listener receives notification of an event.
            </summary>
            <param name="pType">The type of event.</param>
            <param name="pHandler">The listener function that processes the event. This function must accept an event object as its only parameter and must return nothing.</param>
            <param name="pUseCapture">Determines whether the listener works in the capture phase or the target and bubbling phases. If useCapture is set to true , the listener processes the event only during the capture phase and not in the target or bubbling phase. If useCapture is false , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call addEventListener() twice, once with useCapture set to true , then again with useCapture set to false .</param>
            <param name="pPriority">The priority level of the event listener. Priorities are designated by a 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1 . If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0.</param>
            <param name="pUseWeakReference">Determines whether the reference to the listener is strong or weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not.</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.addEventListener(System.String,flash.events.EventHandler,System.Boolean,System.Int32)">
            <summary>
            Registers an event listener object with an <see cref="T:flash.events.EventDispatcher"/> object so that the listener receives notification of an event.
            </summary>
            <param name="pType">The type of event.</param>
            <param name="pHandler">The listener function that processes the event. This function must accept an event object as its only parameter and must return nothing.</param>
            <param name="pUseCapture">Determines whether the listener works in the capture phase or the target and bubbling phases. If useCapture is set to true , the listener processes the event only during the capture phase and not in the target or bubbling phase. If useCapture is false , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call addEventListener() twice, once with useCapture set to true , then again with useCapture set to false .</param>
            <param name="pPriority">The priority level of the event listener. Priorities are designated by a 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1 . If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0.</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.addEventListener(System.String,flash.events.EventHandler,System.Boolean)">
            <summary>
            Registers an event listener object with an <see cref="T:flash.events.EventDispatcher"/> object so that the listener receives notification of an event.
            </summary>
            <param name="pType">The type of event.</param>
            <param name="pHandler">The listener function that processes the event. This function must accept an event object as its only parameter and must return nothing.</param>
            <param name="pUseCapture">Determines whether the listener works in the capture phase or the target and bubbling phases. If useCapture is set to true , the listener processes the event only during the capture phase and not in the target or bubbling phase. If useCapture is false , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call addEventListener() twice, once with useCapture set to true , then again with useCapture set to false .</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.dispatchEvent(flash.events.Event)">
            <summary>
            Dispatches an event into the event flow. The event target is the <see cref="T:flash.events.EventDispatcher"/> object upon which dispatchEvent() is called. 
            </summary>
            <param name="pEvent">The event object dispatched into the event flow</param>
            <returns> value of true unless preventDefault() is called on the event, in which case it returns false .</returns>
        </member>
        <member name="M:flash.events.IEventDispatcher.hasEventListener(System.String)">
            <summary>
            Checks whether the <see cref="T:flash.events.EventDispatcher"/> object has any listeners registered for a specific type of event. This allows you to determine where an <see cref="T:flash.events.EventDispatcher"/> object has altered handling of an event type in the event flow hierarchy. To determine whether a specific event type will actually trigger an event listener, use <see cref="T:flash.events.IEventDispatcher"/>.willTrigger().
            </summary>
            <param name="pType">The type of event</param>
            <returns>A value of true if a listener of the specified type is registered; false otherwise</returns>
        </member>
        <member name="M:flash.events.IEventDispatcher.removeEventListener(System.String,flash.events.EventHandler)">
            <summary>
            Removes a listener from the <see cref="T:flash.events.EventDispatcher"/> object. If there is no matching listener registered with the <see cref="T:flash.events.EventDispatcher"/> object, a call to this method has no effect.
            </summary>
            <param name="pType">The type of event</param>
            <param name="pHandler">The listener object to remove</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.removeEventListener(System.String,flash.events.EventHandler,System.Boolean)">
            <summary>
            Removes a listener from the <see cref="T:flash.events.EventDispatcher"/> object. If there is no matching listener registered with the <see cref="T:flash.events.EventDispatcher"/> object, a call to this method has no effect.
            </summary>
            <param name="pType">The type of event</param>
            <param name="pHandler">The listener object to remove</param>
            <param name="pUseCapture">Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to removeEventListener() are required to remove both: one call with useCapture set to true , and another call with useCapture set to false.</param>
        </member>
        <member name="M:flash.events.IEventDispatcher.willTrigger(System.String)">
            <summary>
            Checks whether an event listener is registered with this <see cref="T:flash.events.EventDispatcher"/> object or any of its ancestors for the specified event type. This method returns true if an event listener is triggered during any phase of the event flow when an event of the specified type is dispatched to this EventDispatcher object or any of its descendants. 
            </summary>
            <param name="pType">The type of event.</param>
            <returns>A value of true if a listener of the specified type will be triggered; false otherwise</returns>
        </member>
        <member name="M:flash.events.EventDispatcher.#ctor">
            <summary>
            Aggregates an instance of the EventDispatcher class
            </summary>
        </member>
        <member name="M:flash.events.EventDispatcher.#ctor(flash.events.IEventDispatcher)">
            <summary>
            Aggregates an instance of the EventDispatcher class
            </summary>
            <param name="pTarget">The target object for events dispatched to the EventDispatcher object. This parameter is used when the EventDispatcher instance is aggregated by a class that implements <see cref="T:flash.events.IEventDispatcher"/>; it is necessary so that the containing object can be the target for events. Do not use this parameter in simple cases in which a class extends EventDispatcher.</param>
        </member>
        <member name="F:flash.display.DisplayObject.accessibilityProperties">
            <summary>
            The current accessibility options for this display object.
            </summary>
        </member>
        <member name="F:flash.display.DisplayObject.alpha">
            <summary>
            Indicates the alpha transparency value of the object specified.
            </summary>
        </member>
        <member name="F:flash.display.DisplayObject.blendMode">
            <summary>
            A value from the <see cref="T:flash.display.BlendMode"/> class that specifies which blend mode to use.
            </summary>
        </member>
        <member name="F:flash.display.DisplayObject.cacheAsBitmap">
            <summary>
            If set to true, Flash Player or Adobe AIR caches an internal bitmap representation of the display object.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.added">
            <summary>
            Dispatched when a display object is added to the display list.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.addedToStage">
            <summary>
            Dispatched when a display object is added to the on stage display list, either directly or through the addition of a sub tree in which the display object is contained.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.enterFrame">
            <summary>
            Dispatched when the playhead is entering a new frame.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.removed">
            <summary>
            Dispatched when a display object is about to be removed from the display list.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.removedFromStage">
            <summary>
            Dispatched when a display object is about to be removed from the display list, either directly or through the removal of a sub tree in which the display object is contained.
            </summary>
        </member>
        <member name="E:flash.display.DisplayObject.render">
            <summary>
            Dispatched when the display list is about to be updated and rendered.
            </summary>
        </member>
        <member name="P:flash.display.DisplayObject.blendShader">
            <summary>
            Sets a shader that is used for blending the foreground and background.
            </summary>
        </member>
        <member name="M:flash.media.Video.attachCamera(flash.media.Camera)">
            <summary>
            Specifies a video stream from a camera to be displayed within the boundaries of the Video object in the application.
            </summary>
        </member>
        <member name="M:flash.media.Video.attachNetStream(flash.net.NetStream)">
            <summary>
            Specifies a video stream to be displayed within the boundaries of the Video object in the application.
            </summary>
        </member>
        <member name="M:flash.media.Video.clear">
            <summary>
            Clears the image currently displayed in the Video object.
            </summary>
        </member>
        <member name="M:flash.media.Video.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Video instance.
            </summary>
        </member>
        <member name="M:flash.media.Video.#ctor(System.Int32)">
            <summary>
            Creates a new Video instance.
            </summary>
        </member>
        <member name="M:flash.media.Video.#ctor">
            <summary>
            Creates a new Video instance.
            </summary>
        </member>
        <member name="P:flash.media.Video.deblocking">
            <summary>
            Indicates the type of filter applied to decoded video as part of post-processing.
            </summary>
        </member>
        <member name="P:flash.media.Video.smoothing">
            <summary>
            Specifies whether the video should be smoothed (interpolated) when it is scaled.
            </summary>
        </member>
        <member name="P:flash.media.Video.videoHeight">
            <summary>
            [read-only] An integer specifying the height of the video stream, in pixels.
            </summary>
        </member>
        <member name="P:flash.media.Video.videoWidth">
            <summary>
            [read-only] An integer specifying the width of the video stream, in pixels.
            </summary>
        </member>
        <member name="M:flash.Global.Namespace.valueOf">
            <summary>
            Returns the URI value of the specified object.
            </summary>
        </member>
        <member name="M:flash.Global.Namespace.#ctor(System.Object)">
            <summary>
            Creates a Namespace object.
            </summary>
        </member>
        <member name="M:flash.Global.Namespace.#ctor(System.Object,System.Object)">
            <summary>
            Creates a Namespace object according to the values of the prefixValue and uriValue parameters.
            </summary>
        </member>
        <member name="P:flash.Global.Namespace.prefix">
            <summary>
            The prefix of the namespace.
            </summary>
        </member>
        <member name="P:flash.Global.Namespace.uri">
            <summary>
            The Uniform Resource Identifier (URI) of the namespace.
            </summary>
        </member>
        <member name="M:flash.filters.BitmapFilter.clone">
            <summary>
            Returns a <see cref="T:flash.filters.BitmapFilter"/> object that is an exact copy of the original <see cref="T:flash.filters.BitmapFilter"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:flash.filters.ShaderFilter.bottomExtension">
            <summary>
            The growth in pixels on the bottom side of the target object
            </summary>
        </member>
        <member name="F:flash.filters.ShaderFilter.leftExtension">
            <summary>
            The growth in pixels on the left side of the target object.
            </summary>
        </member>
        <member name="F:flash.filters.ShaderFilter.rightExtension">
            <summary>
            The growth in pixels on the right side of the target object.
            </summary>
        </member>
        <member name="F:flash.filters.ShaderFilter.topExtension">
            <summary>
            The growth in pixels on the top side of the target object.
            </summary>
        </member>
        <member name="F:flash.filters.ShaderFilter.shader">
            <summary>
            The shader to use for this filter.
            </summary>
        </member>
        <member name="F:flash.display.StageScaleMode.EXACT_FIT">
            <summary>
            Specifies that the entire Adobe® Flash® application be visible in the specified area without trying to preserve the original aspect ratio.
            </summary>
        </member>
        <member name="F:flash.display.StageScaleMode.NO_BORDER">
            <summary>
            Specifies that the entire Flash application fill the specified area, without distortion but possibly with some cropping, while maintaining the original aspect ratio of the application.
            </summary>
        </member>
        <member name="F:flash.display.StageScaleMode.NO_SCALE">
            <summary>
            Specifies that the size of the Flash application be fixed, so that it remains unchanged even as the size of the player window changes.
            </summary>
        </member>
        <member name="F:flash.display.StageScaleMode.SHOW_ALL">
            <summary>
            Specifies that the entire Flash application be visible in the specified area without distortion while maintaining the original aspect ratio of the application.
            </summary>
        </member>
        <member name="M:flash.display.ShaderData.#ctor(flash.utils.ByteArray)">
            <summary>
            Creates a ShaderData instance. Generally, developer code does not call the ShaderData constructor directly. A ShaderData instance containing data, parameters, and inputs for a Shader instance is accessed using its data property. 
            </summary>
            <param name="pByteCode">The shader's byte code.</param>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.forwardAndBack">
            <summary>
            Lets the user move forward or backward one frame in a SWF file at run time (does not appear for a single-frame SWF file).
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.loop">
            <summary>
            Lets the user set a SWF file to start over automatically when it reaches the final frame (does not appear for a single-frame SWF file).
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.play">
            <summary>
            Lets the user start a paused SWF file (does not appear for a single-frame SWF file).
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.print">
            <summary>
            Lets the user send the displayed frame image to a printer.
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.quality">
            <summary>
            Lets the user set the resolution of the SWF file at run time.
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.rewind">
            <summary>
            Lets the user set a SWF file to play from the first frame when selected, at any time (does not appear for a single-frame SWF file).
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.save">
            <summary>
            Lets the user with Shockmachine installed save a SWF file.
            </summary>
        </member>
        <member name="F:flash.ui.ContextMenuBuiltInItems.zoom">
            <summary>
            Lets the user zoom in and out on a SWF file at run time.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.click">
            <summary>
            Dispatched when a user presses and releases the main button of the user's pointing device over the same InteractiveObject.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.doubleClick">
            <summary>
            Dispatched when a user presses and releases the main button of a pointing device twice in rapid succession over the same InteractiveObject when that object's doubleClickEnabled flag is set to true.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.focusIn">
            <summary>
            Dispatched after a display object gains focus.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.focusOut">
            <summary>
            Dispatched after a display object loses focus.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.keyDown">
            <summary>
            Dispatched when the user presses a key.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.keyFocusChange">
            <summary>
            Dispatched when the user attempts to change focus by using keyboard navigation.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.keyUp">
            <summary>
            Dispatched when the user releases a key.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseDown">
            <summary>
            Dispatched when a user presses the pointing device button over an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseFocusChange">
            <summary>
            Dispatched when the user attempts to change focus by using a pointer device.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseMove">
            <summary>
            Dispatched when a user moves the pointing device while it is over an InteractiveObject.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseOut">
            <summary>
            Dispatched when the user moves a pointing device away from an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseOver">
            <summary>
            Dispatched when the user moves a pointing device over an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseUp">
            <summary>
            Dispatched when a user releases the pointing device button over an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.mouseWheel">
            <summary>
            Dispatched when a mouse wheel is spun over an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.rollOut">
            <summary>
            Dispatched when the user moves a pointing device away from an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.rollOver">
            <summary>
            Dispatched when the user moves a pointing device over an InteractiveObject instance.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.tabChildrenChange">
            <summary>
            Dispatched when the value of the object's tabChildren flag changes.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.tabEnabledChange">
            <summary>
            Dispatched when the object's tabEnabled flag changes.
            </summary>
        </member>
        <member name="E:flash.display.InteractiveObject.tabIndexChange">
            <summary>
            Dispatched when the value of the object's tabIndex property changes.
            </summary>
        </member>
        <member name="M:flash.text.TextField.appendText(System.String)">
            <summary>
            Appends the string specified by the newText parameter to the end of the text of the text field.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getCharBoundaries(System.Int32)">
            <summary>
            Returns a rectangle that is the bounding box of the character.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getCharIndexAtPoint(System.Double,System.Double)">
            <summary>
            Returns the zero-based index value of the character at the point specified by the x and y parameters.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getFirstCharInParagraph(System.Int32)">
            <summary>
            Given a character index, returns the index of the first character in the same paragraph.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:flash.text.TextField.getImageReference(System.String)" -->
        <member name="M:flash.text.TextField.getLineIndexAtPoint(System.Double,System.Double)">
            <summary>
            Returns the zero-based index value of the line at the point specified by the x and y parameters.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getLineIndexOfChar(System.Int32)">
            <summary>
            Returns the zero-based index value of the line containing the character specified by the charIndex parameter.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getLineLength(System.Int32)">
            <summary>
            Returns the number of characters in a specific text line.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getLineMetrics(System.Int32)">
            <summary>
            Returns metrics information about a given text line.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getLineOffset(System.Int32)">
            <summary>
            Returns the character index of the first character in the line that the lineIndex parameter specifies.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getLineText(System.Int32)">
            <summary>
            Returns the text of the line specified by the lineIndex parameter.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getParagraphLength(System.Int32)">
            <summary>
            Given a character index, returns the length of the paragraph containing the given character.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getTextFormat(System.Int32,System.Int32)">
            <summary>
            Returns a TextFormat object that contains formatting information for the range of text that the beginIndex and endIndex parameters specify.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getTextFormat(System.Int32)">
            <summary>
            Returns a TextFormat object that contains formatting information for the range of text that the beginIndex and endIndex parameters specify.
            </summary>
        </member>
        <member name="M:flash.text.TextField.getTextFormat">
            <summary>
            Returns a TextFormat object that contains formatting information for the range of text that the beginIndex and endIndex parameters specify.
            </summary>
        </member>
        <member name="M:flash.text.TextField.replaceSelectedText(System.String)">
            <summary>
            Replaces the current selection with the contents of the value parameter.
            </summary>
        </member>
        <member name="M:flash.text.TextField.replaceText(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the range of characters that the beginIndex and endIndex parameters specify with the contents of the newText parameter.
            </summary>
        </member>
        <member name="M:flash.text.TextField.setSelection(System.Int32,System.Int32)">
            <summary>
            Sets as selected the text designated by the index values of the first and last characters, which are specified with the beginIndex and endIndex parameters.
            </summary>
        </member>
        <member name="M:flash.text.TextField.setTextFormat(flash.text.TextFormat,System.Int32,System.Int32)">
            <summary>
            Applies the text formatting that the format parameter specifies to the specified text in a text field.
            </summary>
        </member>
        <member name="M:flash.text.TextField.setTextFormat(flash.text.TextFormat,System.Int32)">
            <summary>
            Applies the text formatting that the format parameter specifies to the specified text in a text field.
            </summary>
        </member>
        <member name="M:flash.text.TextField.setTextFormat(flash.text.TextFormat)">
            <summary>
            Applies the text formatting that the format parameter specifies to the specified text in a text field.
            </summary>
        </member>
        <member name="E:flash.text.TextField.change">
            <summary>
            Dispatched after a control's value is modified.
            </summary>
        </member>
        <member name="E:flash.text.TextField.link">
            <summary>
            Dispatched when a user clicks a hyperlink in an HTML-enabled text field, where the URL begins with "event:".
            </summary>
        </member>
        <member name="E:flash.text.TextField.scroll">
            <summary>
            Dispatched by a TextField object after the user scrolls.
            </summary>
        </member>
        <member name="E:flash.text.TextField.textInput">
            <summary>
            Flash Player dispatches the textInput event when a user enters one or more characters of text.
            </summary>
        </member>
        <member name="P:flash.text.TextField.alwaysShowSelection">
            <summary>
            When set to true and the text field is not in focus, Flash Player highlights the selection in the text field in gray.
            </summary>
        </member>
        <member name="P:flash.text.TextField.antiAliasType">
            <summary>
            The type of anti-aliasing used for this text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.autoSize">
            <summary>
            Controls automatic sizing and alignment of text fields.
            </summary>
        </member>
        <member name="P:flash.text.TextField.background">
            <summary>
            Specifies whether the text field has a background fill.
            </summary>
        </member>
        <member name="P:flash.text.TextField.backgroundColor">
            <summary>
            The color of the text field background.
            </summary>
        </member>
        <member name="P:flash.text.TextField.border">
            <summary>
            Specifies whether the text field has a border.
            </summary>
        </member>
        <member name="P:flash.text.TextField.borderColor">
            <summary>
            The color of the text field border.
            </summary>
        </member>
        <member name="P:flash.text.TextField.bottomScrollV">
            <summary>
            [read-only] An integer (1-based index) that indicates the bottommost line that is currently visible in the specified text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.caretIndex">
            <summary>
            [read-only] The index of the insertion point (caret) position.
            </summary>
        </member>
        <member name="P:flash.text.TextField.condenseWhite">
            <summary>
            A Boolean value that specifies whether extra white space (spaces, line breaks, and so on) in a text field with HTML text should be removed.
            </summary>
        </member>
        <member name="P:flash.text.TextField.contextMenu">
            <summary>
            [read-only]
            </summary>
        </member>
        <member name="P:flash.text.TextField.defaultTextFormat">
            <summary>
            Specifies the format applied to newly inserted text, such as text inserted with the replaceSelectedText() method or text entered by a user.
            </summary>
        </member>
        <member name="P:flash.text.TextField.displayAsPassword">
            <summary>
            Specifies whether the text field is a password text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.embedFonts">
            <summary>
            Specifies whether to render by using embedded font outlines.
            </summary>
        </member>
        <member name="P:flash.text.TextField.gridFitType">
            <summary>
            The type of grid fitting used for this text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.htmlText">
            <summary>
            Contains the HTML representation of the text field's contents.
            </summary>
        </member>
        <member name="P:flash.text.TextField.length">
            <summary>
            [read-only] The number of characters in a text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.maxChars">
            <summary>
            The maximum number of characters that the text field can contain, as entered by a user.
            </summary>
        </member>
        <member name="P:flash.text.TextField.maxScrollH">
            <summary>
            [read-only] The maximum value of scrollH.
            </summary>
        </member>
        <member name="P:flash.text.TextField.maxScrollV">
            <summary>
            [read-only] The maximum value of scrollV.
            </summary>
        </member>
        <member name="P:flash.text.TextField.mouseWheelEnabled">
            <summary>
            A Boolean value that indicates whether Flash Player should automatically scroll multiline text fields when the user clicks a text field and rolls the mouse wheel.
            </summary>
        </member>
        <member name="P:flash.text.TextField.multiline">
            <summary>
            Indicates whether the text field is a multiline text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.numLines">
            <summary>
            [read-only] Defines the number of text lines in a multiline text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.restrict">
            <summary>
            Indicates the set of characters that a user can enter into the text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.scrollH">
            <summary>
            The current horizontal scrolling position.
            </summary>
        </member>
        <member name="P:flash.text.TextField.scrollV">
            <summary>
            The vertical position of text in a text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.selectable">
            <summary>
            A Boolean value that indicates whether the text field is selectable.
            </summary>
        </member>
        <member name="P:flash.text.TextField.selectionBeginIndex">
            <summary>
            [read-only] The zero-based character index value of the first character in the current selection.
            </summary>
        </member>
        <member name="P:flash.text.TextField.selectionEndIndex">
            <summary>
            [read-only] The zero-based character index value of the last character in the current selection.
            </summary>
        </member>
        <member name="P:flash.text.TextField.sharpness">
            <summary>
            The sharpness of the glyph edges in this text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.styleSheet">
            <summary>
            Attaches a style sheet to the text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.text">
            <summary>
            A string that is the current text in the text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.textColor">
            <summary>
            The color of the text in a text field, in hexadecimal format.
            </summary>
        </member>
        <member name="P:flash.text.TextField.textHeight">
            <summary>
            [read-only] The height of the text in pixels.
            </summary>
        </member>
        <member name="P:flash.text.TextField.textWidth">
            <summary>
            [read-only] The width of the text in pixels.
            </summary>
        </member>
        <member name="P:flash.text.TextField.thickness">
            <summary>
            The thickness of the glyph edges in this text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.type">
            <summary>
            The type of the text field.
            </summary>
        </member>
        <member name="P:flash.text.TextField.useRichTextClipboard">
            <summary>
            Specifies whether to copy and paste the text formatting along with the text.
            </summary>
        </member>
        <member name="P:flash.text.TextField.wordWrap">
            <summary>
            A Boolean value that indicates whether the text field has word wrap.
            </summary>
        </member>
        <member name="F:flash.net.URLLoader.bytesLoaded">
            <summary>
            Indicates the number of bytes that have been loaded thus far during the load operation.
            </summary>
        </member>
        <member name="F:flash.net.URLLoader.bytesTotal">
            <summary>
            Indicates the total number of bytes in the downloaded data.
            </summary>
        </member>
        <member name="F:flash.net.URLLoader.data">
            <summary>
            The data received from the load operation.
            </summary>
        </member>
        <member name="F:flash.net.URLLoader.dataFormat">
            <summary>
            Controls whether the downloaded data is received as text (<see cref="T:flash.net.URLLoaderDataFormat"/>.TEXT), raw binary data (URLLoaderDataFormat.BINARY), or URL-encoded variables (URLLoaderDataFormat.VARIABLES).
            </summary>
        </member>
        <member name="M:flash.net.URLLoader.close">
            <summary>
            Closes the load operation in progress.
            </summary>
        </member>
        <member name="M:flash.net.URLLoader.load(flash.net.URLRequest)">
            <summary>
            Sends and loads data from the specified URL.
            </summary>
        </member>
        <member name="M:flash.net.URLLoader.#ctor(flash.net.URLRequest)">
            <summary>
            Creates a URLLoader object.
            </summary>
        </member>
        <member name="M:flash.net.URLLoader.#ctor">
            <summary>
            Creates a URLLoader object.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.complete">
            <summary>
            Dispatched after all the received data is decoded and placed in the data property of the URLLoader object.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.httpStatus">
            <summary>
            Dispatched if a call to URLLoader.load() attempts to access data over HTTP.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.ioError">
            <summary>
            Dispatched if a call to URLLoader.load() results in a fatal error that terminates the download.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.open">
            <summary>
            Dispatched when the download operation commences following a call to the URLLoader.load() method.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.progress">
            <summary>
            Dispatched when data is received as the download operation progresses.
            </summary>
        </member>
        <member name="E:flash.net.URLLoader.securityError">
            <summary>
            Dispatched if a call to URLLoader.load() attempts to load data from a server outside the security sandbox.
            </summary>
        </member>
        <member name="M:flash.Global.Int.toExponential(System.UInt32)">
            <summary>
            Returns a string representation of the number in exponential notation
            </summary>
            <param name="pFractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the fractionDigits argument is outside the range 0 to 20.</exception>
        </member>
        <member name="M:flash.Global.Int.toFixed(System.UInt32)">
            <summary>
            Returns a string representation of the number in fixed-point notation
            </summary>
            <param name="pFractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the fractionDigits argument is outside the range 0 to 20.</exception>
        </member>
        <member name="M:flash.Global.Int.toPrecision(System.UInt32)">
            <summary>
            Returns a string representation of the number either in exponential notation or in fixed-point notation
            </summary>
            <param name="pPrecision">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the precision argument is outside the range 1 to 21.</exception>
        </member>
        <member name="F:flash.Global.EmbedAttribute.mimeType">
            <summary>
            Specifies the mime type of the asset.
            Supported values: 
            <example>
            *  application/octet-stream
            * application/x-font
            * application/x-font-truetype
            * application/x-shockwave-flash
            * audio/mpeg
            * image/gif
            * image/jpeg
            * image/png
            * image/svg
            * image/svg-xml
            </example>
            </summary>
        </member>
        <member name="F:flash.Global.EmbedAttribute.scaleGridBottom">
            <summary>
            Specifies the distance in pixels of the lower dividing line from the top of the image in a scale-9 formatting system. The distance is relative to the original, unscaled size of the image.
            </summary>
        </member>
        <member name="F:flash.Global.EmbedAttribute.scaleGridLeft">
            <summary>
            Specifies the distance in pixels of the left dividing line from the left side of the image in a scale-9 formatting system. The distance is relative to the original, unscaled size of the image.
            </summary>
        </member>
        <member name="F:flash.Global.EmbedAttribute.scaleGridRight">
            <summary>
            Specifies the distance in pixels of the right dividing line from the left side of the image in a scale-9 formatting system. The distance is relative to the original, unscaled size of the image.
            </summary>
        </member>
        <member name="F:flash.Global.EmbedAttribute.scaleGridTop">
            <summary>
            Specifies the distance, in pixels, of the upper dividing line from the top of the image in a scale-9 formatting system. The distance is relative to the original, unscaled size of the image.
            </summary>
        </member>
        <member name="F:flash.Global.EmbedAttribute.source">
            <summary>
            Specifies the name and path of the asset to embed; either an absolute path or a path relative to the file containing the embed statement. The embedded asset must be a locally stored asset. Therefore, you cannot specify a URL for an asset to embed.
            </summary>
        </member>
        <member name="T:flash.utils.CompressionAlgorithm">
            <summary>
            (AIR only)
            Defines string constants for the names of compress and uncompress options. These constants are used as values of the algorithm parameter of the <see cref="T:flash.utils.ByteArray"/>.compress() and <see cref="T:flash.utils.ByteArray"/>.uncompress() methods. 
            </summary>
        </member>
        <member name="M:flash.Global.QName.#ctor(flash.Global.Namespace,flash.Global.QName)">
            <summary>
            Creates a QName object with a URI from a Namespace object and a localName from a QName object.
            </summary>
        </member>
        <member name="M:flash.Global.QName.#ctor(flash.Global.QName)">
            <summary>
            Creates a QName object that is a copy of another QName object.
            </summary>
        </member>
        <member name="M:flash.Global.QName.toString">
            <summary>
            Returns a string composed of the URI, and the local name for the QName object, separated by "::".
            </summary>
        </member>
        <member name="M:flash.Global.QName.valueOf">
            <summary>
            Returns the QName object.
            </summary>
        </member>
        <member name="P:flash.Global.QName.localName">
            <summary>
            [read-only] The local name of the QName object.
            </summary>
        </member>
        <member name="P:flash.Global.QName.uri">
            <summary>
            [read-only] The Uniform Resource Identifier (URI) of the QName object.
            </summary>
        </member>
        <member name="F:flash.events.Event.ACTIVATE">
            <summary>
            [static] The Event.ACTIVATE constant defines the value of the type property of an activate event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.ADDED">
            <summary>
            [static] The Event.ADDED constant defines the value of the type property of an added event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.ADDED_TO_STAGE">
            <summary>
            [static] The Event.ADDED_TO_STAGE constant defines the value of the type property of an addedToStage event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.CANCEL">
            <summary>
            [static] The Event.CANCEL constant defines the value of the type property of a cancel event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.CHANGE">
            <summary>
            [static] The Event.CHANGE constant defines the value of the type property of a change event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.CLOSE">
            <summary>
            [static] The Event.CLOSE constant defines the value of the type property of a close event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.COMPLETE">
            <summary>
            [static] The Event.COMPLETE constant defines the value of the type property of a complete event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.CONNECT">
            <summary>
            [static] The Event.CONNECT constant defines the value of the type property of a connect event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.DEACTIVATE">
            <summary>
            [static] The Event.DEACTIVATE constant defines the value of the type property of a deactivate event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.ENTER_FRAME">
            <summary>
            [static] The Event.ENTER_FRAME constant defines the value of the type property of an enterFrame event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.FULLSCREEN">
            <summary>
            [static] The Event.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.ID3">
            <summary>
            [static] The Event.ID3 constant defines the value of the type property of an id3 event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.INIT">
            <summary>
            [static] The Event.INIT constant defines the value of the type property of an init event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.MOUSE_LEAVE">
            <summary>
            [static] The Event.MOUSE_LEAVE constant defines the value of the type property of a mouseLeave event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.OPEN">
            <summary>
            [static] The Event.OPEN constant defines the value of the type property of an open event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.REMOVED">
            <summary>
            [static] The Event.REMOVED constant defines the value of the type property of a removed event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.REMOVED_FROM_STAGE">
            <summary>
            [static] The Event.REMOVED_FROM_STAGE constant defines the value of the type property of a removedFromStage event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.RENDER">
            <summary>
            [static] The Event.RENDER constant defines the value of the type property of a render event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.RESIZE">
            <summary>
            [static] The Event.RESIZE constant defines the value of the type property of a resize event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.SCROLL">
            <summary>
            [static] The Event.SCROLL constant defines the value of the type property of a scroll event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.SELECT">
            <summary>
            [static] The Event.SELECT constant defines the value of the type property of a select event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.SOUND_COMPLETE">
            <summary>
            [static] The Event.SOUND_COMPLETE constant defines the value of the type property of a soundComplete event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.TAB_CHILDREN_CHANGE">
            <summary>
            [static] The Event.TAB_CHILDREN_CHANGE constant defines the value of the type property of a tabChildrenChange event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.TAB_ENABLED_CHANGE">
            <summary>
            [static] The Event.TAB_ENABLED_CHANGE constant defines the value of the type property of a tabEnabledChange event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.TAB_INDEX_CHANGE">
            <summary>
            [static] The Event.TAB_INDEX_CHANGE constant defines the value of the type property of a tabIndexChange event object.
            </summary>
        </member>
        <member name="F:flash.events.Event.UNLOAD">
            <summary>
            [static] The Event.UNLOAD constant defines the value of the type property of an unload event object.
            </summary>
        </member>
        <member name="M:flash.events.Event.preventDefault">
            <summary>
            Cancels an event's default behavior if that behavior can be canceled.
            </summary>
        </member>
        <member name="M:flash.events.Event.stopImmediatePropagation">
            <summary>
            Prevents processing of any event listeners in the current node and any subsequent nodes in the event flow.
            </summary>
        </member>
        <member name="P:flash.events.Event.bubbles">
            <summary>
            [read-only] Indicates whether an event is a bubbling event.
            </summary>
        </member>
        <member name="P:flash.events.Event.cancelable">
            <summary>
            [read-only] Indicates whether the behavior associated with the event can be prevented.
            </summary>
        </member>
        <member name="P:flash.events.Event.currentTarget">
            <summary>
            [read-only] The object that is actively processing the Event object with an event listener.
            </summary>
        </member>
        <member name="P:flash.events.Event.eventPhase">
            <summary>
            [read-only] The current phase in the event flow.
            </summary>
        </member>
        <member name="P:flash.events.Event.target">
            <summary>
            [read-only] The event target.
            </summary>
        </member>
        <member name="P:flash.events.Event.type">
            <summary>
            [read-only] The type of event.
            </summary>
        </member>
        <member name="F:flash.events.HTTPStatusEvent.HTTP_STATUS">
            <summary>
            The <see cref="T:flash.events.HTTPStatusEvent"/>.HTTP_STATUS constant defines the value of the type property of a httpStatus event object.
            </summary>
        </member>
        <member name="F:flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS">
            <summary>
            The <see cref="T:flash.events.HTTPStatusEvent"/>.HTTP_STATUS constant defines the value of the type property of a httpStatus event object.
            </summary>
        </member>
        <member name="F:flash.events.HTTPStatusEvent.status">
            <summary>
            The HTTP status code returned by the server.
            </summary>
        </member>
        <member name="F:flash.display.Scene.labels">
            <summary>
            [read-only] An array of <see cref="T:flash.display.FrameLabel"/> objects for the scene.
            </summary>
        </member>
        <member name="F:flash.display.Scene.name">
            <summary>
            [read-only] The name of the scene.
            </summary>
        </member>
        <member name="F:flash.display.Scene.numFrames">
            <summary>
            [read-only] The number of frames in the scene.
            </summary>
        </member>
        <member name="M:flash.net.Responder.#ctor(flash.net.Responder.ResponderResultDelegate,flash.net.Responder.ResponderStatusDelegate)">
            <summary>
            Creates a new Responder object.
            </summary>
        </member>
        <member name="M:flash.net.Responder.#ctor(flash.net.Responder.ResponderResultDelegate)">
            <summary>
            Creates a new Responder object.
            </summary>
        </member>
        <member name="F:flash.net.NetConnection.connected">
            <summary>
            Indicates whether the application is connected to a server through a persistent RTMP connection (true) or not (false).
            </summary>
        </member>
        <member name="F:flash.net.NetConnection.connectedProxyType">
            <summary>
            The proxy type used to make a successful NetConnection.connect() call to Flash Media Server: "none", "HTTP", "HTTPS", or "CONNECT".
            </summary>
        </member>
        <member name="F:flash.net.NetConnection.farID">
            <summary>
            The identifier of the Flash Media Server instance to which this Flash Player or Adobe AIR instance is connected.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.addHeader(System.String,System.Boolean,System.Object)">
            <summary>
            Adds a context header to the Action Message Format (AMF) packet structure.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.addHeader(System.String,System.Boolean)">
            <summary>
            Adds a context header to the Action Message Format (AMF) packet structure.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.addHeader(System.String)">
            <summary>
            Adds a context header to the Action Message Format (AMF) packet structure.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.call(System.String,flash.net.Responder,System.Object[])">
            <summary>
            Invokes a command or method on Flash Media Server or on an application server running Flash Remoting.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.call(System.String,flash.net.Responder)">
            <summary>
            Invokes a command or method on Flash Media Server or on an application server running Flash Remoting.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.close">
            <summary>
            Closes the connection that was opened locally or to the server and dispatches a netStatus event with a code property of NetConnection.Connect.Closed.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.connect(System.String,System.Object)">
            <summary>
            Creates a bidirectional connection between a Flash Player or AIR an AIR application and a Flash Media Server application.
            </summary>
        </member>
        <member name="M:flash.net.NetConnection.connect(System.String)">
            <summary>
            Creates a bidirectional connection between a Flash Player or AIR an AIR application and a Flash Media Server application.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.client">
            <summary>
            Indicates the object on which callback methods should be invoked.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.defaultObjectEncoding">
            <summary>
            The default object encoding for NetConnection objects.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.farNonce">
            <summary>
            A value chosen substantially by Flash Media Server, unique to this connection.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.maxPeerConnections">
            <summary>
            The total number of inbound and outbound peer connections that this instance of Flash Player or Adobe AIR allows.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.nearID">
            <summary>
            The identifier of this Flash Player or Adobe AIR instance for this NetConnection instance.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.nearNonce">
            <summary>
            A value chosen substantially by this Flash Player or Adobe AIR instance, unique to this connection.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.objectEncoding">
            <summary>
            The object encoding for this NetConnection instance.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.protocol">
            <summary>
            The protocol used to establish the connection.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.proxyType">
            <summary>
            Determines which fallback methods are tried if an initial connection attempt to the server fails.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.unconnectedPeerStreams">
            <summary>
            [read-only] An object that holds all of the peer subscriber NetStream objects that are not associated with publishing NetStream objects.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.uri">
            <summary>
            [read-only] The URI passed to the NetConnection.connect() method.
            </summary>
        </member>
        <member name="P:flash.net.NetConnection.usingTLS">
            <summary>
            [read-only] Indicates whether a secure connection was made using native Transport Layer Security (TLS) rather than HTTPS.
            </summary>
        </member>
        <member name="E:flash.net.NetConnection.asyncError">
            <summary>
            Dispatched when an exception is thrown asynchronously — that is, from native asynchronous code.
            </summary>
        </member>
        <member name="E:flash.net.NetConnection.ioError">
            <summary>
            Dispatched when an input or output error occurs that causes a network operation to fail.
            </summary>
        </member>
        <member name="E:flash.net.NetConnection.netStatus">
            <summary>
            Dispatched when a NetConnection object is reporting its status or error condition.
            </summary>
        </member>
        <member name="E:flash.net.NetConnection.securityError">
            <summary>
            Dispatched if a call to NetConnection.call() attempts to connect to a server outside the caller's security sandbox.
            </summary>
        </member>
        <member name="M:flash.net.IDynamicPropertyWriter.writeDynamicProperties(System.Object,flash.net.IDynamicPropertyOutput)">
            <summary>
            Writes the name and value of an <see cref="T:flash.net.IDynamicPropertyOutput"/> object to an object with dynamic properties.
            </summary>
            <param name="pObject">The object to write to.</param>
            <param name="pOutput">The <see cref="T:flash.net.IDynamicPropertyOutput"/> object that contains the name and value to dynamically write to the object.</param>
        </member>
        <member name="M:flash.Global.Error.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Error object. If message is specified, its value is assigned to the object's Error.message property.
            </summary>
            <param name="pMessage">A string associated with the Error object; this parameter is optional</param>
            <param name="pId">A reference number to associate with the specific error message</param>
        </member>
        <member name="M:flash.Global.Error.getStackTrace">
            <summary>
            Returns the call stack for an error as a string at the time of the error's construction (for the debugger version of Flash Player and the AIR Debug Launcher (ADL) only; returns null if not using the debugger version of Flash Player or the ADL.
            </summary>
            <returns>A string representation of the call stack.</returns>
        </member>
        <member name="M:flash.Global.Error.toString">
            <summary>
            Returns the string "Error" by default or the value contained in the Error.message property, if defined.
            </summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:flash.Global.SecurityError.#ctor(System.String)">
            <summary>
            The SecurityError exception is thrown when some type of security violation takes place. 
            </summary>
            <param name="pMessage">A string associated with the error object. </param>
        </member>
        <member name="F:flash.filters.ColorMatrixFilter.matrix">
            <summary>
            An array of 20 items for 4 x 5 color transform.
            </summary>
        </member>
        <member name="F:flash.display.DisplayObjectContainer.numChildren">
            <summary>
            [read-only] Returns the number of children of this object.
            </summary>
        </member>
        <member name="F:flash.display.DisplayObjectContainer.textSnapshot">
            <summary>
            [read-only] Returns a <see cref="T:flash.text.TextSnapshot"/> object for this <see cref="T:flash.display.DisplayObjectContainer"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.addChild(flash.display.DisplayObject)">
            <summary>
            Adds a child <see cref="T:flash.display.DisplayObject"/> instance to this <see cref="T:flash.display.DisplayObjectContainer"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.addChildAt(flash.display.DisplayObject,System.Int32)">
            <summary>
            Adds a child <see cref="T:flash.display.DisplayObject"/> instance to this <see cref="T:flash.display.DisplayObjectContainer"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint(flash.geom.Point)">
            <summary>
            Indicates whether the security restrictions would cause any display objects to be omitted from the list returned by calling the DisplayObjectContainer.getObjectsUnderPoint() method with the specified point point.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.contains(flash.display.DisplayObject)">
            <summary>
            Determines whether the specified display object is a child of the <see cref="T:flash.display.DisplayObjectContainer"/> instance or the instance itself.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.getChildAt(System.Int32)">
            <summary>
            Returns the child display object instance that exists at the specified index.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.getChildByName(System.String)">
            <summary>
            Returns the child display object that exists with the specified name.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.getChildIndex(flash.display.DisplayObject)">
            <summary>
            Returns the index position of a child <see cref="T:flash.display.DisplayObject"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.getObjectsUnderPoint(flash.geom.Point)">
            <summary>
            Returns an array of objects that lie under the specified point and are children (or grandchildren, and so on) of this <see cref="T:flash.display.DisplayObjectContainer"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.removeChild(flash.display.DisplayObject)">
            <summary>
            Removes the specified child <see cref="T:flash.display.DisplayObject"/> instance from the child list of the <see cref="T:flash.display.DisplayObjectContainer"/> instance.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.removeChildAt(System.Int32)">
            <summary>
            Removes a child <see cref="T:flash.display.DisplayObject"/> from the specified index position in the child list of the <see cref="T:flash.display.DisplayObjectContainer"/>.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.setChildIndex(flash.display.DisplayObject,System.Int32)">
            <summary>
            Changes the position of an existing child in the display object container.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.swapChildren(flash.display.DisplayObject,flash.display.DisplayObject)">
            <summary>
            Swaps the z-order (front-to-back order) of the two specified child objects.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.swapChildrenAt(System.Int32,System.Int32)">
            <summary>
            Swaps the z-order (front-to-back order) of the child objects at the two specified index positions in the child list.
            </summary>
        </member>
        <member name="M:flash.display.DisplayObjectContainer.#ctor">
            <summary>
            Calling the new DisplayObjectContainer() constructor throws an ArgumentError exception.
            </summary>
        </member>
        <member name="P:flash.display.DisplayObjectContainer.mouseChildren">
            <summary>
            Determines whether or not the children of the object are mouse enabled.
            </summary>
        </member>
        <member name="P:flash.display.DisplayObjectContainer.tabChildren">
            <summary>
            Determines whether the children of the object are tab enabled.
            </summary>
        </member>
        <member name="F:flash.display.Sprite.dropTarget">
            <summary>
            [read-only] Specifies the display object over which the sprite is being dragged, or on which the sprite was dropped.
            </summary>
        </member>
        <member name="F:flash.display.Sprite.graphics">
            <summary>
            [read-only] Specifies the Graphics object that belongs to this sprite where vector drawing commands can occur.
            </summary>
        </member>
        <member name="M:flash.display.Sprite.startDrag(System.Boolean,flash.geom.Rectangle)">
            <summary>
            Lets the user drag the specified sprite.
            </summary>
        </member>
        <member name="M:flash.display.Sprite.startDrag(System.Boolean)">
            <summary>
            Lets the user drag the specified sprite.
            </summary>
        </member>
        <member name="M:flash.display.Sprite.startDrag">
            <summary>
            Lets the user drag the specified sprite.
            </summary>
        </member>
        <member name="M:flash.display.Sprite.stopDrag">
            <summary>
            Ends the startDrag() method.
            </summary>
        </member>
        <member name="P:flash.display.Sprite.buttonMode">
            <summary>
            Specifies the button mode of this sprite.
            </summary>
        </member>
        <member name="P:flash.display.Sprite.hitArea">
            <summary>
            Designates another sprite to serve as the hit area for a sprite.
            </summary>
        </member>
        <member name="P:flash.display.Sprite.soundTransform">
            <summary>
            Controls sound within this sprite.
            </summary>
        </member>
        <member name="P:flash.display.Sprite.useHandCursor">
            <summary>
            A Boolean value that indicates whether the pointing hand (hand cursor) appears when the mouse rolls over a sprite in which the buttonMode property is set to true.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.currentFrame">
            <summary>
            [read-only] Specifies the number of the frame in which the playhead is located in the timeline of the MovieClip instance.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.currentLabel">
            <summary>
            [read-only] The current label in which the playhead is located in the timeline of the MovieClip instance.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.currentLabels">
            <summary>
            [read-only] Returns an array of FrameLabel objects from the current scene.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.currentScene">
            <summary>
            [read-only] The current scene in which the playhead is located in the timeline of the MovieClip instance.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.framesLoaded">
            <summary>
            [read-only] The number of frames that are loaded from a streaming SWF file.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.scenes">
            <summary>
            [read-only] An array of Scene objects, each listing the name, the number of frames, and the frame labels for a scene in the MovieClip instance.
            </summary>
        </member>
        <member name="F:flash.display.MovieClip.totalFrames">
            <summary>
            [read-only] The total number of frames in the MovieClip instance.
            </summary>
        </member>
        <member name="M:flash.display.MovieClip.play">
            <summary>
            Moves the playhead in the timeline of the movie clip.
            </summary>
        </member>
        <member name="M:flash.display.MovieClip.stop">
            <summary>
            Stops the playhead in the movie clip.
            </summary>
        </member>
        <member name="P:flash.display.MovieClip.enabled">
            <summary>
            A Boolean value that indicates whether a movie clip is enabled.
            </summary>
        </member>
        <member name="P:flash.display.MovieClip.trackAsMenu">
            <summary>
            Indicates whether other display objects that are SimpleButton or MovieClip objects can receive mouse release events.
            </summary>
        </member>
        <member name="F:flash.display.Loader.content">
            <summary>
            [read-only] Contains the root display object of the SWF file or image (JPG, PNG, or GIF) file that was loaded by using the load() or loadBytes() methods.
            </summary>
        </member>
        <member name="F:flash.display.Loader.contentLoaderInfo">
            <summary>
            [read-only] Returns a <see cref="T:flash.display.LoaderInfo"/> object corresponding to the object being loaded.
            </summary>
        </member>
        <member name="M:flash.display.Loader.close">
            <summary>
            Cancels a load() method operation that is currently in progress for the Loader instance.
            </summary>
        </member>
        <member name="M:flash.display.Loader.load(flash.net.URLRequest,flash.system.LoaderContext)">
            <summary>
            Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an object that is a child of this Loader object.
            </summary>
        </member>
        <member name="M:flash.display.Loader.load(flash.net.URLRequest)">
            <summary>
            Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an object that is a child of this Loader object.
            </summary>
        </member>
        <member name="M:flash.display.Loader.loadBytes(flash.utils.ByteArray,flash.system.LoaderContext)">
            <summary>
            Loads from binary data stored in a <see cref="T:flash.utils.ByteArray"/> object.
            </summary>
        </member>
        <member name="M:flash.display.Loader.loadBytes(flash.utils.ByteArray)">
            <summary>
            Loads from binary data stored in a <see cref="T:flash.utils.ByteArray"/> object.
            </summary>
        </member>
        <member name="M:flash.display.Loader.unload">
            <summary>
            Removes a child of this Loader object that was loaded by using the load() method.
            </summary>
        </member>
        <member name="T:flash.display.ActionScriptVersion">
            <summary>
            The ActionScriptVersion class is an enumeration of constant values that indicate the language version of a loaded SWF file. The language version constants are provided for use in checking the actionScriptVersion property of a flash.display.LoaderInfo object.
            </summary>
        </member>
        <member name="M:flash.Global.String.#ctor(System.String)">
            <summary>
            Creates a new String object initialized to the specified string.
            </summary>
        </member>
        <member name="M:flash.Global.String.charAt(System.Double)">
            <summary>
            Returns the character in the position specified by the index parameter.
            </summary>
        </member>
        <member name="M:flash.Global.String.charAt">
            <summary>
            Returns the character in the position specified by the index parameter.
            </summary>
        </member>
        <member name="M:flash.Global.String.charCodeAt(System.Double)">
            <summary>
            Returns the numeric Unicode character code of the character at the specified index.
            </summary>
        </member>
        <member name="M:flash.Global.String.charCodeAt">
            <summary>
            Returns the numeric Unicode character code of the character at the specified index.
            </summary>
        </member>
        <member name="M:flash.Global.String.concat(System.Object[])">
            <summary>
            Appends the supplied arguments to the end of the String object, converting them to strings if necessary, and returns the resulting string.
            </summary>
        </member>
        <member name="M:flash.Global.String.concat">
            <summary>
            Appends the supplied arguments to the end of the String object, converting them to strings if necessary, and returns the resulting string.
            </summary>
        </member>
        <member name="M:flash.Global.String.fromCharCode(System.UInt32[])">
            <summary>
            [static] Returns a string comprising the characters represented by the Unicode character codes in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.String.fromCharCode">
            <summary>
            [static] Returns a string comprising the characters represented by the Unicode character codes in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.String.indexOf(System.String,System.Double)">
            <summary>
            Searches the string and returns the position of the first occurrence of val found at or after startIndex within the calling string.
            </summary>
        </member>
        <member name="M:flash.Global.String.indexOf(System.String)">
            <summary>
            Searches the string and returns the position of the first occurrence of val found at or after startIndex within the calling string.
            </summary>
        </member>
        <member name="M:flash.Global.String.lastIndexOf(System.String,System.Double)">
            <summary>
            Searches the string from right to left and returns the index of the last occurrence of val found before startIndex.
            </summary>
        </member>
        <member name="M:flash.Global.String.lastIndexOf(System.String)">
            <summary>
            Searches the string from right to left and returns the index of the last occurrence of val found before startIndex.
            </summary>
        </member>
        <member name="M:flash.Global.String.localeCompare(System.String,System.Object)">
            <summary>
            Compares the sort order of two or more strings and returns the result of the comparison as an integer.
            </summary>
        </member>
        <member name="M:flash.Global.String.localeCompare(System.String)">
            <summary>
            Compares the sort order of two or more strings and returns the result of the comparison as an integer.
            </summary>
        </member>
        <member name="M:flash.Global.String.match(System.String)">
            <summary>
            Matches the specifed pattern against the string.
            </summary>
        </member>
        <member name="M:flash.Global.String.replace(System.String,System.String)">
            <summary>
            Matches the specifed pattern against the string and returns a new string in which the first match of pattern is replaced with the content specified by repl.
            </summary>
        </member>
        <member name="M:flash.Global.String.search(System.String)">
            <summary>
            Searches for the specifed pattern and returns the index of the first matching substring.
            </summary>
        </member>
        <member name="M:flash.Global.String.slice(System.Double,System.Double)">
            <summary>
            Returns a string that includes the startIndex character and all characters up to, but not including, the endIndex character.
            </summary>
        </member>
        <member name="M:flash.Global.String.slice(System.Double)">
            <summary>
            Returns a string that includes the startIndex character and all characters up to, but not including, the endIndex character.
            </summary>
        </member>
        <member name="M:flash.Global.String.slice">
            <summary>
            Returns a string that includes the startIndex character and all characters up to, but not including, the endIndex character.
            </summary>
        </member>
        <member name="M:flash.Global.String.split(System.String,System.Double)">
            <summary>
            Splits a String object into an array of substrings by dividing it wherever the specified delimiter parameter occurs.
            </summary>
        </member>
        <member name="M:flash.Global.String.split(System.String)">
            <summary>
            Splits a String object into an array of substrings by dividing it wherever the specified delimiter parameter occurs.
            </summary>
        </member>
        <member name="M:flash.Global.String.substr(System.Double,System.Double)">
            <summary>
            Returns a substring consisting of the characters that start at the specified startIndex and with a length specified by len.
            </summary>
        </member>
        <member name="M:flash.Global.String.substr(System.Double)">
            <summary>
            Returns a substring consisting of the characters that start at the specified startIndex and with a length specified by len.
            </summary>
        </member>
        <member name="M:flash.Global.String.substr">
            <summary>
            Returns a substring consisting of the characters that start at the specified startIndex and with a length specified by len.
            </summary>
        </member>
        <member name="M:flash.Global.String.substring(System.Double,System.Double)">
            <summary>
            Returns a string consisting of the character specified by startIndex and all characters up to endIndex - 1.
            </summary>
        </member>
        <member name="M:flash.Global.String.substring(System.Double)">
            <summary>
            Returns a string consisting of the character specified by startIndex and all characters up to endIndex - 1.
            </summary>
        </member>
        <member name="M:flash.Global.String.substring">
            <summary>
            Returns a string consisting of the character specified by startIndex and all characters up to endIndex - 1.
            </summary>
        </member>
        <member name="M:flash.Global.String.toLocaleLowerCase">
            <summary>
            Returns a copy of this string, with all uppercase characters converted to lowercase.
            </summary>
        </member>
        <member name="M:flash.Global.String.toLocaleUpperCase">
            <summary>
            Returns a copy of this string, with all lowercase characters converted to uppercase.
            </summary>
        </member>
        <member name="M:flash.Global.String.toLowerCase">
            <summary>
            Returns a copy of this string, with all uppercase characters converted to lowercase.
            </summary>
        </member>
        <member name="M:flash.Global.String.toUpperCase">
            <summary>
            Returns a copy of this string, with all lowercase characters converted to uppercase.
            </summary>
        </member>
        <member name="M:flash.Global.String.valueOf">
            <summary>
            Returns the primitive value of a String instance.
            </summary>
        </member>
        <member name="P:flash.Global.String.length">
            <summary>
            [read-only] An integer specifying the number of characters in the specified String object.
            </summary>
        </member>
        <member name="T:flash.Global.String.StringReplaceDelegate">
            <param name="match">The matching portion of the string.</param>
            <param name="args">Any captured parenthetical group matches are provided as the next arguments. The number of arguments passed this way will vary depending on the number of parenthetical matches. You can determine the number of parenthetical matches by checking arguments.length - 3 within the function code. Then, the index position in the string where the match begins. And last, The complete string.</param>
            <returns></returns>
        </member>
        <member name="F:flash.text.AntiAliasType.NORMAL">
            <summary>
            Applies the regular text anti-aliasing. This value matches the type of anti-aliasing that Flash Player 7 and earlier versions used.
            </summary>
        </member>
        <member name="F:flash.text.AntiAliasType.ADVANCED">
            <summary>
            Applies advanced anti-aliasing, which makes text more legible. (This feature became available in Flash Player 8.) Advanced anti-aliasing allows for high-quality rendering of font faces at small sizes. It is best used with applications with a lot of small text. Advanced anti-aliasing is not recommended for fonts that are larger than 48 points.
            </summary>
        </member>
        <member name="M:flash.net.FileFilter.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new FileFilter instance.
            </summary>
        </member>
        <member name="M:flash.net.FileFilter.#ctor(System.String,System.String)">
            <summary>
            Creates a new FileFilter instance.
            </summary>
        </member>
        <member name="P:flash.net.FileFilter.description">
            <summary>
            The description string for the filter.
            </summary>
        </member>
        <member name="P:flash.net.FileFilter.extension">
            <summary>
            A list of file extensions.
            </summary>
        </member>
        <member name="P:flash.net.FileFilter.macType">
            <summary>
            A list of Macintosh file types.
            </summary>
        </member>
        <member name="M:flash.Global.IOError.#ctor(System.String)">
            <summary>
            The IOError exception is thrown when some type of input or output failure occurs. For example, an IOError exception is thrown if a read/write operation is attempted on a socket that has not connected or that has become disconnected.
            </summary>
            <param name="pMessage">A string associated with the error object. </param>
        </member>
        <member name="F:flash.events.NetStatusEvent.NET_STATUS">
            <summary>
            Defines the value of the type property of a netStatus event object.
            </summary>
        </member>
        <member name="P:flash.events.NetStatusEvent.info">
            <summary>
            An object with properties that describe the object's status or error condition.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.ADD">
            <summary>
            Adds the values of the constituent colors of the display object to the colors of its background, applying a ceiling of 0xFF.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.ALPHA">
            <summary>
            Applies the alpha value of each pixel of the display object to the background.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.DARKEN">
            <summary>
            Selects the darker of the constituent colors of the display object and the colors of the background (the colors with the smaller values).
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.DIFFERENCE">
            <summary>
            Compares the constituent colors of the display object with the colors of its background, and subtracts the darker of the values of the two constituent colors from the lighter value.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.ERASE">
            <summary>
            Erases the background based on the alpha value of the display object.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.HARDLIGHT">
            <summary>
            Adjusts the color of each pixel based on the darkness of the display object.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.INVERT">
            <summary>
            Inverts the background.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.LAYER">
            <summary>
            Forces the creation of a transparency group for the display object.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.LIGHTEN">
            <summary>
            Selects the lighter of the constituent colors of the display object and the colors of the background (the colors with the larger values).
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.MULTIPLY">
            <summary>
            Multiplies the values of the display object constituent colors by the constituent colors of the background color, and normalizes by dividing by 0xFF, resulting in darker colors.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.NORMAL">
            <summary>
            The display object appears in front of the background.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.OVERLAY">
            <summary>
            Adjusts the color of each pixel based on the darkness of the background.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.SCREEN">
            <summary>
            Multiplies the complement (inverse) of the display object color by the complement of the background color, resulting in a bleaching effect.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.SHADER">
            <summary>
            Uses a shader to define the blend between objects.
            </summary>
        </member>
        <member name="F:flash.display.BlendMode.SUBTRACT">
            <summary>
            Subtracts the values of the constituent colors in the display object from the values of the background color, applying a floor of 0.
            </summary>
        </member>
        <member name="F:flash.display.Bitmap.bitmapData">
            <summary>
            The <see cref="T:flash.display.BitmapData"/> object being referenced.
            </summary>
        </member>
        <member name="F:flash.display.Bitmap.pixelSnapping">
            <summary>
            Controls whether or not the Bitmap object is snapped to the nearest pixel.
            </summary>
        </member>
        <member name="F:flash.display.Bitmap.smoothing">
            <summary>
            Controls whether or not the bitmap is smoothed when scaled.
            </summary>
        </member>
        <member name="M:flash.display.Bitmap.#ctor(flash.display.BitmapData,flash.display.PixelSnapping,System.Boolean)">
            <summary>
            Initializes a Bitmap object to refer to the specified <see cref="T:flash.display.BitmapData"/> object.
            </summary>
            <param name="bitmapData">The <see cref="T:flash.display.BitmapData"/> object being referenced.</param>
            <param name="pixelSnapping">Whether or not the Bitmap object is snapped to the nearest pixel.</param>
            <param name="smoothing">Whether or not the bitmap is smoothed when scaled.</param>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.description">
            <summary>
            Provides a description for this display object in the accessible presentation.
            </summary>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.forceSimple">
            <summary>
            If <see langword="true"/>, causes Flash Player to exclude child objects within this display object from the accessible presentation.
            </summary>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.name">
            <summary>
            Provides a name for this display object in the accessible presentation.
            </summary>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.noAutoLabeling">
            <summary>
            If <see langword="true"/>, disables the Flash Player default auto-labeling system.
            </summary>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.shortcut">
            <summary>
            Indicates a keyboard shortcut associated with this display object.
            </summary>
        </member>
        <member name="F:flash.accessibility.AccessibilityProperties.silent">
            <summary>
            If <see langword="true"/>, excludes this display object from accessible presentation.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readBoolean">
            <summary>
            Reads a Boolean value from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readByte">
            <summary>
            Reads a signed byte from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readBytes(flash.utils.ByteArray,System.UInt32,System.UInt32)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readBytes(flash.utils.ByteArray,System.UInt32)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readBytes(flash.utils.ByteArray)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readDouble">
            <summary>
            Reads an IEEE 754 double-precision floating point number from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readFloat">
            <summary>
            Reads an IEEE 754 single-precision floating point number from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readInt">
            <summary>
            Reads a signed 32-bit integer from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readMultiByte(System.UInt32,System.String)">
            <summary>
            Reads a multibyte string of specified length from the file stream, byte stream, or byte array using the specified character set.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readObject">
            <summary>
            Reads an object from the file stream, byte stream, or byte array, encoded in AMF serialized format.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readShort">
            <summary>
            Reads a signed 16-bit integer from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readUnsignedByte">
            <summary>
            Reads an unsigned byte from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readUnsignedInt">
            <summary>
            Reads an unsigned 32-bit integer from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readUnsignedShort">
            <summary>
            Reads an unsigned 16-bit integer from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readUTF">
            <summary>
            Reads a UTF-8 string from the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataInput.readUTFBytes(System.UInt32)">
            <summary>
            Reads a sequence of UTF-8 bytes from the byte stream or byte array and returns a string.
            </summary>
        </member>
        <member name="P:flash.utils.IDataInput.bytesAvailable">
            <summary>
            [read-only] Returns the number of bytes of data available for reading in the input buffer.
            </summary>
        </member>
        <member name="P:flash.utils.IDataInput.endian">
            <summary>
            The byte order for the data, either the BIG_ENDIAN or LITTLE_ENDIAN constant from the Endian class.
            </summary>
        </member>
        <member name="P:flash.utils.IDataInput.objectEncoding">
            <summary>
            Used to determine whether the AMF3 or AMF0 format is used when writing or reading binary data using the readObject() method.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.avHardwareDisable">
            <summary>
            [static] [read-only] Specifies whether access to the user's camera and microphone has been administratively prohibited (true) or allowed (false).
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasAccessibility">
            <summary>
            [static] [read-only] Specifies whether the system supports (true) or does not support (false) communication with accessibility aids.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasAudio">
            <summary>
            [static] [read-only] Specifies whether the system has audio capabilities.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasAudioEncoder">
            <summary>
            [static] [read-only] Specifies whether the system can (true) or cannot (false) encode an audio stream, such as that coming from a microphone.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasEmbeddedVideo">
            <summary>
            [static] [read-only] Specifies whether the system supports (true) or does not support (false) embedded video.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasIME">
            <summary>
            [static] [read-only] Specifies whether the system does (true) or does not (false) have an input method editor (IME) installed.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasMP3">
            <summary>
            [static] [read-only] Specifies whether the system does (true) or does not (false) have an MP3 decoder.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasPrinting">
            <summary>
            [static] [read-only] Specifies whether the system does (true) or does not (false) support printing.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasScreenBroadcast">
            <summary>
            [static] [read-only] Specifies whether the system does (true) or does not (false) support the development of screen broadcast applications to be run through Flash Media Server.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasScreenPlayback">
            <summary>
            [static] [read-only] Specifies whether the system does (true) or does not (false) support the playback of screen broadcast applications that are being run through Flash Media Server.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasStreamingAudio">
            <summary>
            [static] [read-only] Specifies whether the system can (true) or cannot (false) play streaming audio.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasStreamingVideo">
            <summary>
            [static] [read-only] Specifies whether the system can (true) or cannot (false) play streaming video.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasTLS">
            <summary>
            [static] [read-only] Specifies whether the system supports native SSL sockets through NetConnection (true) or does not (false).
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.hasVideoEncoder">
            <summary>
            [static] [read-only] Specifies whether the system can (true) or cannot (false) encode a video stream, such as that coming from a web camera.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.isDebugger">
            <summary>
            [static] [read-only] Specifies whether the system is a special debugging version (true) or an officially released version (false).
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.isEmbeddedInAcrobat">
            <summary>
            [static] [read-only] Specifies whether the player is embedded in a PDF file that is open in Acrobat 9.0 or higher (true) or not (false).
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.language">
            <summary>
            [static] [read-only] Specifies the language code of the system on which the content is running.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.localFileReadDisable">
            <summary>
            [static] [read-only] Specifies whether read access to the user's hard disk has been administratively prohibited (true) or allowed (false).
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.manufacturer">
            <summary>
            [static] [read-only] Specifies the manufacturer of the running version of Flash Player or the AIR runtime, in the format "Adobe OSName".
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.os">
            <summary>
            [static] [read-only] Specifies the current operating system.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.pixelAspectRatio">
            <summary>
            [static] [read-only] Specifies the pixel aspect ratio of the screen.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.playerType">
            <summary>
            [static] [read-only] Specifies the type of runtime environment.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.screenColor">
            <summary>
            [static] [read-only] Specifies the screen color.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.screenDPI">
            <summary>
            [static] [read-only] Specifies the dots-per-inch (dpi) resolution of the screen, in pixels.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.screenResolutionX">
            <summary>
            [static] [read-only] Specifies the maximum horizontal resolution of the screen.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.screenResolutionY">
            <summary>
            [static] [read-only] Specifies the maximum vertical resolution of the screen.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.serverString">
            <summary>
            [static] [read-only] A URL-encoded string that specifies values for each Capabilities property.
            </summary>
        </member>
        <member name="P:flash.system.Capabilities.version">
            <summary>
            [static] [read-only] Specifies the Flash Player or Adobe® AIR platform and version information.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.creationDate">
            <summary>
            The creation date of the file on the local disk.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.creator">
            <summary>
            The Macintosh creator type of the file, which is only used in Mac OS versions prior to Mac OS X.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.data">
            <summary>
            The <see cref="T:flash.utils.ByteArray"/> object representing the data from the loaded file after a successful call to the load() method.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.modificationDate">
            <summary>
            The date that the file on the local disk was last modified.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.name">
            <summary>
            The name of the file on the local disk.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.size">
            <summary>
            The size of the file on the local disk in bytes.
            </summary>
        </member>
        <member name="F:flash.net.FileReference.type">
            <summary>
            The file type.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.browse(flash.net.FileFilter[])">
            <summary>
            Displays a file-browsing dialog box that lets the user select a file to upload.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.browse">
            <summary>
            Displays a file-browsing dialog box that lets the user select a file to upload.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.cancel">
            <summary>
            Cancels any ongoing upload or download operation on this <see cref="T:flash.net.FileReference"/> object.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.download(flash.net.URLRequest,System.String)">
            <summary>
            Opens a dialog box that lets the user download a file from a remote server.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.download(flash.net.URLRequest)">
            <summary>
            Opens a dialog box that lets the user download a file from a remote server.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.load">
            <summary>
            Starts the load of a local file selected by a user.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.save(System.Object,System.String)">
            <summary>
            Opens a dialog box that lets the user save a file to the local filesystem.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.save(System.Object)">
            <summary>
            Opens a dialog box that lets the user save a file to the local filesystem.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.upload(flash.net.URLRequest,System.String,System.Boolean)">
            <summary>
            Starts the upload of a file selected by a user to a remote server.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.upload(flash.net.URLRequest,System.String)">
            <summary>
            Starts the upload of a file selected by a user to a remote server.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.upload(flash.net.URLRequest)">
            <summary>
            Starts the upload of a file selected by a user to a remote server.
            </summary>
        </member>
        <member name="M:flash.net.FileReference.#ctor">
            <summary>
            Creates a new FileReference object.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.cancelled">
            <summary>
            Dispatched when a file upload or download is canceled through the file-browsing dialog box by the user.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.complete">
            <summary>
            Dispatched when download is complete or when upload generates an HTTP status code of 200.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.httpStatus">
            <summary>
            Dispatched when an upload fails and an HTTP status code is available to describe the failure.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.ioError">
            <summary>
            Dispatched when the upload or download fails.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.open">
            <summary>
            Dispatched when an upload or download operation starts.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.progress">
            <summary>
            Dispatched periodically during the file upload or download operation.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.securityError">
            <summary>
            Dispatched when a call to the FileReference.upload() or FileReference.download() method tries to upload a file to a server or get a file from a server that is outside the caller's security sandbox.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.select">
            <summary>
            Dispatched when the user selects a file for upload or download from the file-browsing dialog box.
            </summary>
        </member>
        <member name="E:flash.net.FileReference.uploadCompleteData">
            <summary>
            Dispatched after data is received from the server after a successful upload.
            </summary>
        </member>
        <member name="M:flash.media.SoundChannel.stop">
            <summary>
            Stops the sound playing in the channel.
            </summary>
        </member>
        <member name="P:flash.media.SoundChannel.leftPeak">
            <summary>
            [read-only] The current amplitude (volume) of the left channel, from 0 (silent) to 1 (full amplitude).
            </summary>
        </member>
        <member name="P:flash.media.SoundChannel.position">
            <summary>
            [read-only] When the sound is playing, the position property indicates the current point that is being played in the sound file.
            </summary>
        </member>
        <member name="P:flash.media.SoundChannel.rightPeak">
            <summary>
            [read-only] The current amplitude (volume) of the right channel, from 0 (silent) to 1 (full amplitude).
            </summary>
        </member>
        <member name="P:flash.media.SoundChannel.soundTransform">
            <summary>
            The SoundTransform object assigned to the sound channel.
            </summary>
        </member>
        <member name="E:flash.media.SoundChannel.soundComplete">
            <summary>
            Dispatched when a sound has finished playing.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.CLICK">
            <summary>
            Defines the value of the type property of a click event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.DOUBLE_CLICK">
            <summary>
            Defines the value of the type property of a doubleClick event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_DOWN">
            <summary>
            Defines the value of the type property of a mouseDown event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_MOVE">
            <summary>
            Defines the value of the type property of a mouseMove event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_OUT">
            <summary>
            Defines the value of the type property of a mouseOut event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_OVER">
            <summary>
            Defines the value of the type property of a mouseOver event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_UP">
            <summary>
            Defines the value of the type property of a mouseUp event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.MOUSE_WHEEL">
            <summary>
            Defines the value of the type property of a mouseWheel event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.ROLL_OUT">
            <summary>
            Defines the value of the type property of a rollOut event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.ROLL_OVER">
            <summary>
            Defines the value of the type property of a rollOver event object.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.stageX">
            <summary>
            [read-only] The horizontal coordinate at which the event occurred in global Stage coordinates.
            </summary>
        </member>
        <member name="F:flash.events.MouseEvent.stageY">
            <summary>
            [read-only] The vertical coordinate at which the event occurred in global Stage coordinates.
            </summary>
        </member>
        <member name="M:flash.events.MouseEvent.updateAfterEvent">
            <summary>
            Instructs Flash Player to render after processing of this event completes, if the display list has been modified. 
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.altKey">
            <summary>
            Indicates whether the Alt key is active (true) or inactive (false).
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.buttonDown">
            <summary>
            Indicates whether the primary mouse button is pressed (true) or not (false).
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.ctrlKey">
            <summary>
            On Windows, indicates whether the Ctrl key is active (true) or inactive (false).
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.delta">
            <summary>
            Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel.
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.localX">
            <summary>
            The horizontal coordinate at which the event occurred relative to the containing sprite.
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.localY">
            <summary>
            The vertical coordinate at which the event occurred relative to the containing sprite.
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.relatedObject">
            <summary>
            A reference to a display list object that is related to the event.
            </summary>
        </member>
        <member name="P:flash.events.MouseEvent.shiftKey">
            <summary>
            Indicates whether the Shift key is active (true) or inactive (false).
            </summary>
        </member>
        <member name="M:flash.display.Shader.#ctor(flash.utils.ByteArray)">
            <summary>
            Creates a new Shader instance.
            </summary>
            <param name="pByteCode">The raw shader bytecode to link to the Shader.</param>
        </member>
        <member name="F:flash.display.Shader.data">
            <summary>
            Provides access to parameters, input images, and metadata for the Shader instance.
            </summary>
        </member>
        <member name="P:flash.display.Shader.byteCode">
            <summary>
            The raw shader bytecode for this Shader instance.
            </summary>
        </member>
        <member name="F:flash.display.FrameLabel.frame">
            <summary>
            [read-only] The frame number containing the label.
            </summary>
        </member>
        <member name="F:flash.display.FrameLabel.name">
            <summary>
            [read-only] The name of the label.
            </summary>
        </member>
        <member name="M:flash.utils.Dictionary.#ctor(System.Boolean)">
            <summary>
            Creates a new Dictionary object.
            </summary>
        </member>
        <member name="M:flash.utils.Dictionary.#ctor">
            <summary>
            Creates a new Dictionary object.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.align">
            <summary>
            Indicates the alignment of the paragraph.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.blockIndent">
            <summary>
            Indicates the block indentation in pixels.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.bold">
            <summary>
            Specifies whether the text is boldface.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.bullet">
            <summary>
            Indicates that the text is part of a bulleted list.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.color">
            <summary>
            Indicates the color of the text.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.font">
            <summary>
            The name of the font for text in this text format, as a string.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.indent">
            <summary>
            Indicates the indentation from the left margin to the first character in the paragraph.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.italic">
            <summary>
            Indicates whether text in this text format is italicized.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.kerning">
            <summary>
            A Boolean value that indicates whether kerning is enabled (true) or disabled (false).
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.leading">
            <summary>
            An integer representing the amount of vertical space (called leading) between lines.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.leftMargin">
            <summary>
            The left margin of the paragraph, in pixels.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.letterSpacing">
            <summary>
            A number representing the amount of space that is uniformly distributed between all characters.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.rightMargin">
            <summary>
            The right margin of the paragraph, in pixels.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.size">
            <summary>
            The point size of text in this text format.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.tabStops">
            <summary>
            Specifies custom tab stops as an array of non-negative integers.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.target">
            <summary>
            Indicates the target window where the hyperlink is displayed.
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.underline">
            <summary>
            Indicates whether the text that uses this text format is underlined (<see langword="true"/>) or not (<see langword="false"/>).
            </summary>
        </member>
        <member name="P:flash.text.TextFormat.url">
            <summary>
            Indicates the target URL for the text in this text format.
            </summary>
        </member>
        <member name="F:flash.system.LoaderContext.applicationDomain">
            <summary>
            Specifies the application domain to use for the Loader.load() or Loader.loadBytes() method.
            </summary>
        </member>
        <member name="F:flash.system.LoaderContext.checkPolicyFile">
            <summary>
            Specifies whether Flash Player should attempt to download a cross-domain policy file from the loaded object's server before beginning to load the object itself.
            </summary>
        </member>
        <member name="F:flash.system.LoaderContext.securityDomain">
            <summary>
            Specifies the security domain to use for a Loader.load() operation.
            </summary>
        </member>
        <member name="M:flash.system.LoaderContext.#ctor(System.Boolean,flash.system.ApplicationDomain,flash.system.SecurityDomain)">
            <summary>
            Creates a new LoaderContext object, with the specified settings.
            </summary>
        </member>
        <member name="M:flash.system.LoaderContext.#ctor(System.Boolean,flash.system.ApplicationDomain)">
            <summary>
            Creates a new LoaderContext object, with the specified settings.
            </summary>
        </member>
        <member name="M:flash.system.LoaderContext.#ctor(System.Boolean)">
            <summary>
            Creates a new LoaderContext object, with the specified settings.
            </summary>
        </member>
        <member name="M:flash.system.LoaderContext.#ctor">
            <summary>
            Creates a new LoaderContext object, with the specified settings.
            </summary>
        </member>
        <member name="M:flash.net.IDynamicPropertyOutput.writeDynamicProperty(System.String,System.Object)">
            <summary>
            Adds a dynamic property to the binary output of a serialized object.
            </summary>
            <param name="pName">The name of the property. You can use this parameter either to specify the name of an existing property of the dynamic object or to create a new property.</param>
            <param name="pValue">The value to write to the specified property.</param>
        </member>
        <member name="M:flash.media.Sound.play(System.Double,System.Int32,flash.media.SoundTransform)">
            <summary>
            Generates a new <see cref="T:flash.media.SoundChannel"/> object to play back the sound.
            </summary>
            <param name="startTime"></param>
            <param name="loops"></param>
            <param name="sndTransform"></param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Vector`1.#ctor">
            <summary>
            Creates a Vector with the specified base type
            </summary>
        </member>
        <member name="M:flash.Global.Vector`1.#ctor(System.UInt32)">
            <summary>
            Creates a Vector with the specified base type
            </summary>
            <param name="pLength">The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type ( null for reference types).</param>
        </member>
        <member name="M:flash.Global.Vector`1.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates a Vector with the specified base type
            </summary>
            <param name="pLength">The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type ( null for reference types).</param>
            <param name="pIsFixed">Whether the Vector's length is fixed ( true ) or can be changed ( false ). This value can also be set using the <see cref="F:flash.Global.Vector`1.isFixed"/> property</param>
        </member>
        <member name="M:flash.Global.Vector`1.concat(`0[])">
            <summary>
            Concatenates the elements specified in the parameters with the elements in the Vector and creates a new Vector. If the parameters specify a Vector, the elements of that Vector are concatenated.
            </summary>
            <param name="pElements">One or more values of the base type of this Vector to be concatenated in a new Vector. If you don't pass any values, the new Vector is a duplicate of the original Vector.</param>
            <returns>A Vector with the same base type as this Vector that contains the elements from this Vector followed by elements from the parameters</returns>
            <exception cref="T:flash.Global.TypeError">If any argument is not an instance of the base type and can't be converted to the base type</exception>
        </member>
        <member name="M:flash.Global.Vector`1.every(flash.Global.Vector{`0}.VectorFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the Vector until an item is reached that returns false for the specified function. You use this method to determine whether all items in a Vector meet a criterion, such as having values less than a particular number.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object</param>
            <param name="pThisObject">The object that the identifer this in the callback function refers to when the function is called.</param>
            <returns>A Boolean value of true if the specified function returns true when called on all items in the Vector; otherwise, false.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.every(flash.Global.Vector{`0}.VectorFilterCallback)">
            <summary>
            Executes a test function on each item in the Vector until an item is reached that returns false for the specified function. You use this method to determine whether all items in a Vector meet a criterion, such as having values less than a particular number.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object</param>
            <returns>A Boolean value of true if the specified function returns true when called on all items in the Vector; otherwise, false.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.filter(flash.Global.Vector{`0}.VectorFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the Vector and returns a new Vector containing all items that return true for the specified function. If an item returns false , it is not included in the result Vector. The base type of the return Vector matches the base type of the Vector on which the method is called.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <param name="pThisObject">The object that the identifer this in the callback function refers to when the function is called.</param>
            <returns>A new Vector that contains all items from the original Vector for which the callback function returned true.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.filter(flash.Global.Vector{`0}.VectorFilterCallback)">
            <summary>
            Executes a test function on each item in the Vector and returns a new Vector containing all items that return true for the specified function. If an item returns false , it is not included in the result Vector. The base type of the return Vector matches the base type of the Vector on which the method is called.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <returns>A new Vector that contains all items from the original Vector for which the callback function returned true.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.forEach(flash.Global.Vector{`0}.VectorForEachCallback,System.Object)">
            <summary>
            Executes a function on each item in the Vector.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <param name="pThisObject">The object that the identifer this in the callback function refers to when the function is called.</param>
        </member>
        <member name="M:flash.Global.Vector`1.forEach(flash.Global.Vector{`0}.VectorForEachCallback)">
            <summary>
            Executes a function on each item in the Vector.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
        </member>
        <member name="M:flash.Global.Vector`1.indexOf(`0,System.Int32)">
            <summary>
            Searches for an item in the Vector and returns the index position of the item. The item is compared to the Vector elements using strict equality ( === )
            </summary>
            <param name="pSearchElement">The item to find in the Vector.</param>
            <param name="pFrom">The location in the Vector from which to start searching for the item. If this parameter is negative, it is treated as length + fromIndex , meaning the search starts -fromIndex items from the end and searches from that position forward to the end of the Vector.</param>
            <returns>A zero-based index position of the item in the Vector. If the searchElement argument is not found, the return value is -1.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.indexOf(`0)">
            <summary>
            Searches for an item in the Vector and returns the index position of the item. The item is compared to the Vector elements using strict equality ( === )
            </summary>
            <param name="pSearchElement">The item to find in the Vector.</param>
            <returns>A zero-based index position of the item in the Vector. If the searchElement argument is not found, the return value is -1.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.join(System.String)">
            <summary>
            Converts the elements in the Vector to strings, inserts the specified separator between the elements, concatenates them, and returns the resulting string. A nested Vector is always separated by a comma (,), not by the separator passed to the join() method.
            </summary>
            <param name="pSeparator">A character or string that separates Vector elements in the returned string. If you omit this parameter, a comma is used as the default separator.</param>
            <returns>A string consisting of the elements of the Vector converted to strings and separated by the specified string.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.join">
            <summary>
            Converts the elements in the Vector to strings, inserts the specified separator between the elements, concatenates them, and returns the resulting string. A nested Vector is always separated by a comma (,), not by the separator passed to the join() method.
            </summary>
            <returns>A string consisting of the elements of the Vector converted to strings and separated by the specified string.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.lastIndexOf(`0,System.Int32)">
            <summary>
            Searches for an item in the Vector, working backward from the specified index position, and returns the index position of the matching item. The item is compared to the Vector elements using strict equality ( === ).
            </summary>
            <param name="pSearchElement">The location in the Vector from which to start searching for the item. The default is the maximum allowable index value, meaning that the search starts at the last item in the Vector.</param>
            <param name="pFrom">The item to find in the Vector.</param>
            <returns>A zero-based index position of the item in the Vector. If the searchElement argument is not found, the return value is -1.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.lastIndexOf(`0)">
            <summary>
            Searches for an item in the Vector, working backward from the specified index position, and returns the index position of the matching item. The item is compared to the Vector elements using strict equality ( === ).
            </summary>
            <param name="pSearchElement">The location in the Vector from which to start searching for the item. The default is the maximum allowable index value, meaning that the search starts at the last item in the Vector.</param>
            <returns>A zero-based index position of the item in the Vector. If the searchElement argument is not found, the return value is -1.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.map(flash.Global.Vector{`0}.VectorMapCallback,System.Object)">
            <summary>
            Executes a function on each item in the Vector, and returns a new Vector of items corresponding to the results of calling the function on each item in this Vector. The result Vector has the same base type and length as the original Vector. The element at index i in the result Vector is the result of the call on the element at index i in the original Vector.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <param name="pThisObject">The object that the identifer this in the callback function refers to when the function is called.</param>
            <returns>A new Vector that contains the results of calling the function on each item in this Vector. The result Vector has the same base type and length as the original.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.map(flash.Global.Vector{`0}.VectorMapCallback)">
            <summary>
            Executes a function on each item in the Vector, and returns a new Vector of items corresponding to the results of calling the function on each item in this Vector. The result Vector has the same base type and length as the original Vector. The element at index i in the result Vector is the result of the call on the element at index i in the original Vector.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <returns>A new Vector that contains the results of calling the function on each item in this Vector. The result Vector has the same base type and length as the original.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.pop">
            <summary>
            Removes the last element from the Vector and returns that element. The length property of the Vector is decreased by one when this function is called.
            </summary>
            <returns>The value of the last element in the specified Vector.</returns>
            <exception cref="T:flash.Global.RangeError">If this method is called while <see cref="F:flash.Global.Vector`1.isFixed"/> is true.</exception>
        </member>
        <member name="M:flash.Global.Vector`1.push(`0[])">
            <summary>
            Adds one or more elements to the end of the Vector and returns the new length of the Vector. Because this function can accept multiple arguments, the data type of the arguments is not checked at compile time even in strict mode. However, if an argument is passed that is not an instance of the base type, an exception occurs at run time.
            </summary>
            <param name="pElements">One or more values to append to the Vector.</param>
            <returns>The length of the Vector after the new elements are added.</returns>
            <exception cref="T:flash.Global.TypeError">If any argument is not an instance of the base type T of the Vector.</exception>
            <exception cref="T:flash.Global.RangeError">If this method is called while <see cref="F:flash.Global.Vector`1.isFixed"/> is true.</exception>
        </member>
        <member name="M:flash.Global.Vector`1.reverse">
            <summary>
            Reverses the order of the elements in the Vector. This method alters the Vector on which it is called
            </summary>
            <returns>The Vector with the elements in reverse order.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.shift">
            <summary>
            Removes the first element from the Vector and returns that element. The remaining Vector elements are moved from their original position, i, to i - 1.
            </summary>
            <returns>The first element in the Vector.</returns>
            <exception cref="T:flash.Global.RangeError">If <see cref="F:flash.Global.Vector`1.isFixed"/> is true.</exception>
        </member>
        <member name="M:flash.Global.Vector`1.slice(System.Int32,System.Int32)">
            <summary>
            Returns a new Vector that consists of a range of elements from the original Vector, without modifying the original Vector. The returned Vector includes the startIndex element and all elements up to, but not including, the endIndex element. If you don't pass any parameters, a duplicate of the original Vector is created.
            </summary>
            <param name="pStartIndex">A number specifying the index of the starting point for the slice. If startIndex is a negative number, the starting point begins at the end of the Vector, where -1 is the last element.</param>
            <param name="pEndIndex">A number specifying the index of the ending point for the slice. If you omit this parameter, the slice includes all elements from the starting point to the end of the Vector. If endIndex is a negative number, the ending point is specified from the end of the Vector, where -1 is the last element.</param>
            <returns>a Vector that consists of a range of elements from the original Vector.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.slice(System.Int32)">
            <summary>
            Returns a new Vector that consists of a range of elements from the original Vector, without modifying the original Vector. The returned Vector includes the startIndex element and all elements up to, but not including, the endIndex element. If you don't pass any parameters, a duplicate of the original Vector is created.
            </summary>
            <param name="pStartIndex">A number specifying the index of the starting point for the slice. If startIndex is a negative number, the starting point begins at the end of the Vector, where -1 is the last element.</param>
            <returns>a Vector that consists of a range of elements from the original Vector.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.slice">
            <summary>
            Returns a new Vector that consists of a range of elements from the original Vector, without modifying the original Vector. The returned Vector includes the startIndex element and all elements up to, but not including, the endIndex element. If you don't pass any parameters, a duplicate of the original Vector is created.
            </summary>
            <returns>a Vector that consists of a range of elements from the original Vector.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.some(flash.Global.Vector{`0}.VectorFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the Vector until an item is reached that returns true . Use this method to determine whether any items in a Vector meet a criterion, such as having a value less than a particular number.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <param name="pThisObject">The object that the identifer this in the callback function refers to when the function is called.</param>
            <returns>A Boolean value of true if any items in the Vector return true for the specified function; otherwise, false.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.some(flash.Global.Vector{`0}.VectorFilterCallback)">
            <summary>
            Executes a test function on each item in the Vector until an item is reached that returns true. Use this method to determine whether any items in a Vector meet a criterion, such as having a value less than a particular number.
            </summary>
            <param name="pCallback">The function to run on each item in the Vector. This function is invoked with three arguments: the current item from the Vector, the index of the item, and the Vector object.</param>
            <returns>A Boolean value of true if any items in the Vector return true for the specified function; otherwise, false.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.sort(flash.Global.Vector{`0}.VectorSortCallback)">
            <summary>
            Sorts the elements in the Vector. This method sorts according to the function provided as the <paramref name="pCallback"/> parameter.
            </summary>
            <param name="pCallback">A comparison method that determines the behavior of the sort.</param>
            <returns>This Vector, with elements in the new order.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.splice(System.Int32,System.Int32,`0[])">
            <summary>
            Adds elements to and removes elements from the Vector. This method modifies the Vector without making a copy.
            </summary>
            <param name="pStartIndex">An integer that specifies the index of the element in the Vector where the insertion or deletion begins. You can use a negative integer to specify a position relative to the end of the Vector (for example, -1 for the last element of the Vector).</param>
            <param name="pDeleteCount">An integer that specifies the number of elements to be deleted. This number includes the element specified in the startIndex parameter. If you do not specify a value for the deleteCount parameter, the method deletes all of the values from the startIndex element to the last element in the Vector. If the value is 0, no elements are deleted.</param>
            <param name="pElements">An optional list of one or more comma-separated values, or a Vector, to insert into the Vector at the position specified in the startIndex parameter.</param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Vector`1.splice(System.Int32,System.Int32,flash.Global.Vector{`0})">
            <summary>
            Adds elements to and removes elements from the Vector. This method modifies the Vector without making a copy.
            </summary>
            <param name="pStartIndex">An integer that specifies the index of the element in the Vector where the insertion or deletion begins. You can use a negative integer to specify a position relative to the end of the Vector (for example, -1 for the last element of the Vector).</param>
            <param name="pDeleteCount">An integer that specifies the number of elements to be deleted. This number includes the element specified in the startIndex parameter. If you do not specify a value for the deleteCount parameter, the method deletes all of the values from the startIndex element to the last element in the Vector. If the value is 0, no elements are deleted.</param>
            <param name="pElements">An optional list of one or more comma-separated values, or a Vector, to insert into the Vector at the position specified in the startIndex parameter.</param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Vector`1.splice(System.Int32,System.Int32)">
            <summary>
            Adds elements to and removes elements from the Vector. This method modifies the Vector without making a copy.
            </summary>
            <param name="pStartIndex">An integer that specifies the index of the element in the Vector where the insertion or deletion begins. You can use a negative integer to specify a position relative to the end of the Vector (for example, -1 for the last element of the Vector).</param>
            <param name="pDeleteCount">An integer that specifies the number of elements to be deleted. This number includes the element specified in the startIndex parameter. If you do not specify a value for the deleteCount parameter, the method deletes all of the values from the startIndex element to the last element in the Vector. If the value is 0, no elements are deleted.</param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Vector`1.toLocaleString">
            <summary>
            Returns a string that represents the elements in the specified Vector. Every element in the Vector, starting with index 0 and ending with the highest index, is converted to a concatenated string and separated by commas. In the ActionScript 3.0 implementation, this method returns the same value as the Vector.toString() method.
            </summary>
            <returns>A string of Vector elements.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.toString">
            <summary>
            Returns a string that represents the elements in the Vector. Every element in the Vector, starting with index 0 and ending with the highest index, is converted to a concatenated string and separated by commas. To specify a custom separator, use the Vector.join() method.
            </summary>
            <returns>A string of Vector elements.</returns>
        </member>
        <member name="M:flash.Global.Vector`1.unshift(`0[])">
            <summary>
            Adds one or more elements to the beginning of the Vector and returns the new length of the Vector. The other elements in the Vector are moved from their original position, i, to i + the number of new elements. Because this function can accept multiple arguments, the data type of the arguments is not checked at compile time even in strict mode. However, if an argument is passed that is not an instance of the base type, an exception occurs at run time.
            </summary>
            <param name="pElements">One or more instances of the base type of the Vector to be inserted at the beginning of the Vector.</param>
            <returns>An integer representing the new length of the Vector.</returns>
            <exception cref="T:flash.Global.TypeError">If any argument is not an instance of the base type T of the Vector.</exception>
            <exception cref="T:flash.Global.RangeError">If this method is called while <see cref="F:flash.Global.Vector`1.isFixed"/> is true.</exception>
        </member>
        <member name="M:flash.Global.Vector`1.op_Explicit(flash.Global.Array)~flash.Global.Vector{`0}">
            <summary>
             Converts an Array to a Vector of type <typeparamref name="T"/>
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:flash.Global.Vector`1.VectorSortCallback">
            <summary>
            The logic of the compareFunction function is that, given two elements x and y , the function returns one of the following three values
            * a negative number, if x should appear before y in the sorted sequence
            * 0, if x equals y
            * positive number, if x should appear after y in the sorted sequence 
            </summary>
        </member>
        <member name="M:System.UInt.toExponential(System.UInt32)">
            <summary>
            Returns a string representation of the number in exponential notation
            </summary>
            <param name="pFractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the fractionDigits argument is outside the range 0 to 20.</exception>
        </member>
        <member name="M:System.UInt.toFixed(System.UInt32)">
            <summary>
            Returns a string representation of the number in fixed-point notation
            </summary>
            <param name="pFractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the fractionDigits argument is outside the range 0 to 20.</exception>
        </member>
        <member name="M:System.UInt.toPrecision(System.UInt32)">
            <summary>
            Returns a string representation of the number either in exponential notation or in fixed-point notation
            </summary>
            <param name="pPrecision">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the precision argument is outside the range 1 to 21.</exception>
        </member>
        <member name="M:flash.Global.Date.getDate">
            <summary>
            Returns the day of the month (an integer from 1 to 31) specified by a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getDay">
            <summary>
            Returns the day of the week (0 for Sunday, 1 for Monday, and so on) specified by this Date according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getFullYear">
            <summary>
            Returns the full year (a four-digit number, such as 2000) of a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getHours">
            <summary>
            Returns the hour (an integer from 0 to 23) of the day portion of a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getMilliseconds">
            <summary>
            Returns the milliseconds (an integer from 0 to 999) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getMinutes">
            <summary>
            Returns the minutes (an integer from 0 to 59) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getMonth">
            <summary>
            Returns the month (0 for January, 1 for February, and so on) portion of this Date according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getSeconds">
            <summary>
            Returns the seconds (an integer from 0 to 59) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getTime">
            <summary>
            Returns the number of milliseconds since midnight January 1, 1970, universal time, for a Date object.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getTimezoneOffset">
            <summary>
            Returns the difference, in minutes, between universal time (UTC) and the computer's local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCDate">
            <summary>
            Returns the day of the month (an integer from 1 to 31) of a Date object, according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCDay">
            <summary>
            Returns the day of the week (0 for Sunday, 1 for Monday, and so on) of this Date according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCFullYear">
            <summary>
            Returns the four-digit year of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCHours">
            <summary>
            Returns the hour (an integer from 0 to 23) of the day of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCMilliseconds">
            <summary>
            Returns the milliseconds (an integer from 0 to 999) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCMinutes">
            <summary>
            Returns the minutes (an integer from 0 to 59) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCMonth">
            <summary>
            Returns the month (0 [January] to 11 [December]) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.getUTCSeconds">
            <summary>
            Returns the seconds (an integer from 0 to 59) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.parse(System.String)">
            <summary>
            [static] Converts a string representing a date into a number equaling the number of milliseconds elapsed since January 1, 1970, UTC.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setDate(System.Double)">
            <summary>
            Sets the day of the month, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setFullYear(System.Double,System.Double,System.Double)">
            <summary>
            Sets the year, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setHours(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the hour, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setMilliseconds(System.Double)">
            <summary>
            Sets the milliseconds, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setMinutes(System.Double,System.Double,System.Double)">
            <summary>
            Sets the minutes, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setMonth(System.Double,System.Double)">
            <summary>
            Sets the month and optionally the day of the month, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setSeconds(System.Double,System.Double)">
            <summary>
            Sets the seconds, according to local time, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setTime(System.Double)">
            <summary>
            Sets the date in milliseconds since midnight on January 1, 1970, and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCDate(System.Double)">
            <summary>
            Sets the day of the month, in universal time (UTC), and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCFullYear(System.Double,System.Double,System.Double)">
            <summary>
            Sets the year, in universal time (UTC), and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCHours(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the hour, in universal time (UTC), and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCMilliseconds(System.Double)">
            <summary>
            Sets the milliseconds, in universal time (UTC), and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCMinutes(System.Double,System.Double,System.Double)">
            <summary>
            Sets the minutes, in universal time (UTC), and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCMonth(System.Double,System.Double)">
            <summary>
            Sets the month, and optionally the day, in universal time(UTC) and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.setUTCSeconds(System.Double,System.Double)">
            <summary>
            Sets the seconds, and optionally the milliseconds, in universal time (UTC) and returns the new time in milliseconds.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toDateString">
            <summary>
            Returns a string representation of the day and date only, and does not include the time or timezone.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toLocaleDateString">
            <summary>
            Returns a String representation of the day and date only, and does not include the time or timezone.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toLocaleString">
            <summary>
            Returns a String representation of the day, date, time, given in local time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toLocaleTimeString">
            <summary>
            Returns a String representation of the time only, and does not include the day, date, year, or timezone.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toTimeString">
            <summary>
            Returns a String representation of the time and timezone only, and does not include the day and date.
            </summary>
        </member>
        <member name="M:flash.Global.Date.toUTCString">
            <summary>
            Returns a String representation of the day, date, and time in universal time (UTC).
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.UTC(System.Double,System.Double)">
            <summary>
            [static] Returns the number of milliseconds between midnight on January 1, 1970, universal time, and the time specified in the parameters.
            </summary>
        </member>
        <member name="M:flash.Global.Date.valueOf">
            <summary>
            Returns the number of milliseconds since midnight January 1, 1970, universal time, for a Date object.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="M:flash.Global.Date.#ctor(System.Object,System.Double)">
            <summary>
            Constructs a new Date object that holds the specified date and time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.date">
            <summary>
            The day of the month (an integer from 1 to 31) specified by a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.dateUTC">
            <summary>
            The day of the month (an integer from 1 to 31) of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.day">
            <summary>
            [read-only] The day of the week (0 for Sunday, 1 for Monday, and so on) specified by this Date according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.dayUTC">
            <summary>
            [read-only] The day of the week (0 for Sunday, 1 for Monday, and so on) of this Date according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.fullYear">
            <summary>
            The full year (a four-digit number, such as 2000) of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.fullYearUTC">
            <summary>
            The four-digit year of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.hours">
            <summary>
            The hour (an integer from 0 to 23) of the day portion of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.hoursUTC">
            <summary>
            The hour (an integer from 0 to 23) of the day of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.milliseconds">
            <summary>
            The milliseconds (an integer from 0 to 999) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.millisecondsUTC">
            <summary>
            The milliseconds (an integer from 0 to 999) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.minutes">
            <summary>
            The minutes (an integer from 0 to 59) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.minutesUTC">
            <summary>
            The minutes (an integer from 0 to 59) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.month">
            <summary>
            The month (0 for January, 1 for February, and so on) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.monthUTC">
            <summary>
            The month (0 [January] to 11 [December]) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.seconds">
            <summary>
            The seconds (an integer from 0 to 59) portion of a Date object according to local time.
            </summary>
        </member>
        <member name="P:flash.Global.Date.secondsUTC">
            <summary>
            The seconds (an integer from 0 to 59) portion of a Date object according to universal time (UTC).
            </summary>
        </member>
        <member name="P:flash.Global.Date.time">
            <summary>
            The number of milliseconds since midnight January 1, 1970, universal time, for a Date object.
            </summary>
        </member>
        <member name="P:flash.Global.Date.timezoneOffset">
            <summary>
            [read-only] The difference, in minutes, between universal time (UTC) and the computer's local time.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.alphas">
            <summary>
            The alpha transparency value for the shadow color.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.angle">
            <summary>
            The angle of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.colors">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.distance">
            <summary>
            The offset distance of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.knockout">
            <summary>
            Applies a knockout effect (true), which effectively makes the object's fill transparent and reveals the background color of the document.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.ratios">
            <summary>
            An array of color distribution ratios for the corresponding colors in the colors array.
            </summary>
        </member>
        <member name="F:flash.filters.GradientBevelFilter.strength">
            <summary>
            The strength of the imprint or spread.
            </summary>
        </member>
        <member name="F:flash.events.KeyboardEvent.KEY_DOWN">
            <summary>
            Defines the value of the type property of a keyDown event object.
            </summary>
        </member>
        <member name="F:flash.events.KeyboardEvent.KEY_UP">
            <summary>
            Defines the value of the type property of a keyUp event object.
            </summary>
        </member>
        <member name="M:flash.events.KeyboardEvent.updateAfterEvent">
            <summary>
            Instructs Flash Player to render after processing of this event completes, if the display list has been modified. 
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.altKey">
            <summary>
            Indicates whether the Alt key is active (true) or inactive (false) on Windows; indicates whether the Option key is active on Mac OS.
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.charCode">
            <summary>
            Contains the character code value of the key pressed or released.
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.ctrlKey">
            <summary>
            On Windows, indicates whether the Ctrl key is active (true) or inactive (false); On Mac OS, indicates whether either the Ctrl key or the Command key is active.
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.keyCode">
            <summary>
            The key code value of the key pressed or released.
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.keyLocation">
            <summary>
            Indicates the location of the key on the keyboard.
            </summary>
        </member>
        <member name="P:flash.events.KeyboardEvent.shiftKey">
            <summary>
            Indicates whether the Shift key modifier is active (true) or inactive (false).
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardTransferMode.CLONE_ONLY">
            <summary>
            The Clipboard object should only return a copy.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardTransferMode.CLONE_PREFERRED">
            <summary>
            The Clipboard object should return a copy if available and a reference if not.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardTransferMode.ORIGINAL_ONLY">
            <summary>
            The Clipboard object should only return a reference.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardTransferMode.ORIGINAL_PREFERRED">
            <summary>
            The Clipboard object should return a reference if available and a copy if not.
            </summary>
        </member>
        <member name="M:flash.net.URLVariables.decode(System.String)">
            <summary>
            Converts the variable string to properties of the specified <see cref="T:flash.net.URLVariables"/> object.
            </summary>
        </member>
        <member name="M:flash.net.URLVariables.#ctor(System.String)">
            <summary>
            Creates a new URLVariables object.
            </summary>
        </member>
        <member name="M:flash.net.URLVariables.#ctor">
            <summary>
            Creates a new URLVariables object.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.angle">
            <summary>
            The angle of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.distance">
            <summary>
            The offset distance of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.highlightAlpha">
            <summary>
            The alpha transparency value of the highlight color.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.highlightColor">
            <summary>
            The highlight color of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.knockout">
            <summary>
            Applies a knockout effect (true), which effectively makes the object's fill transparent and reveals the background color of the document.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.shadowAlpha">
            <summary>
            The alpha transparency value of the shadow color.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.shadowColor">
            <summary>
            The shadow color of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.strength">
            <summary>
            The strength of the imprint or spread.
            </summary>
        </member>
        <member name="F:flash.filters.BevelFilter.type">
            <summary>
            The placement of the bevel on the object.
            </summary>
        </member>
        <member name="F:flash.events.TextEvent.LINK">
            <summary>
             Defines the value of the type property of a link event object.
            </summary>
        </member>
        <member name="F:flash.events.TextEvent.TEXT_INPUT">
            <summary>
            Defines the value of the type property of a textInput event object.
            </summary>
        </member>
        <member name="M:flash.events.TextEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an Event object that contains information about text events.
            </summary>
        </member>
        <member name="M:flash.events.TextEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an Event object that contains information about text events.
            </summary>
        </member>
        <member name="M:flash.events.TextEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an Event object that contains information about text events.
            </summary>
        </member>
        <member name="M:flash.events.TextEvent.#ctor(System.String)">
            <summary>
            Creates an Event object that contains information about text events.
            </summary>
        </member>
        <member name="M:flash.events.TextEvent.clone">
            <summary>
            Creates a copy of the <see cref="T:flash.events.TextEvent"/> object and sets the value of each property to match that of the original.
            </summary>
        </member>
        <member name="P:flash.events.TextEvent.text">
            <summary>
            For a textInput event, the character or sequence of characters entered by the user.
            </summary>
        </member>
        <member name="F:flash.events.DataEvent.DATA">
            <summary>
            Defines the value of the type property of a data event object.
            </summary>
        </member>
        <member name="F:flash.events.DataEvent.UPLOAD_COMPLETE_DATA">
            <summary>
            Defines the value of the type property of an uploadCompleteData event object.
            </summary>
        </member>
        <member name="M:flash.events.DataEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an event object that contains information about data events.
            </summary>
        </member>
        <member name="M:flash.events.DataEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an event object that contains information about data events.
            </summary>
        </member>
        <member name="M:flash.events.DataEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an event object that contains information about data events.
            </summary>
        </member>
        <member name="M:flash.events.DataEvent.#ctor(System.String)">
            <summary>
            Creates an event object that contains information about data events.
            </summary>
        </member>
        <member name="P:flash.events.DataEvent.data">
            <summary>
            The raw data loaded into Flash Player or Adobe AIR.
            </summary>
        </member>
        <member name="F:flash.display.StageDisplayState.FULL_SCREEN">
            <summary>
            Specifies that the Stage is in full-screen mode.
            </summary>
        </member>
        <member name="F:flash.ui.KeyLocation.LEFT">
            <summary>
            Indicates the key activated is in the left key location (there is more than one possible location for this key).
            </summary>
        </member>
        <member name="F:flash.ui.KeyLocation.NUM_PAD">
            <summary>
            Indicates the key activation originated on the numeric keypad or with a virtual key corresponding to the numeric keypad.
            </summary>
        </member>
        <member name="F:flash.ui.KeyLocation.RIGHT">
            <summary>
            Indicates the key activated is in the right key location (there is more than one possible location for this key).
            </summary>
        </member>
        <member name="F:flash.ui.KeyLocation.STANDARD">
            <summary>
            Indicates the key activation is not distinguished as the left or right version of the key, and did not originate on the numeric keypad (or did not originate with a virtual key corresponding to the numeric keypad).
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenuItem.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new ContextMenuItem object that can be added to the <see cref="T:flash.ui.ContextMenu"/>.customItems array.
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenuItem.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new ContextMenuItem object that can be added to the ContextMenu.customItems array.
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenuItem.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new ContextMenuItem object that can be added to the <see cref="T:flash.ui.ContextMenu"/>.customItems array.
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenuItem.#ctor(System.String)">
            <summary>
            Creates a new ContextMenuItem object that can be added to the <see cref="T:flash.ui.ContextMenu"/>.customItems array.
            </summary>
        </member>
        <member name="P:flash.ui.ContextMenuItem.caption">
            <summary>
            Specifies the menu item caption (text) displayed in the context menu.
            </summary>
        </member>
        <member name="P:flash.ui.ContextMenuItem.separatorBefore">
            <summary>
            Indicates whether a separator bar should appear above the specified menu item.
            </summary>
        </member>
        <member name="P:flash.ui.ContextMenuItem.visible">
            <summary>
            Indicates whether the specified menu item is visible when the Flash Player context menu is displayed.
            </summary>
        </member>
        <member name="E:flash.ui.ContextMenuItem.menuItemSelect">
            <summary>
            Dispatched when a user selects an item from a context menu.
            </summary>
        </member>
        <member name="F:flash.net.URLRequestMethod.GET">
            <summary>
            Specifies that the URLRequest object is a GET.
            </summary>
        </member>
        <member name="F:flash.net.URLRequestMethod.POST">
            <summary>
            Specifies that the URLRequest object is a POST.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.clear">
            <summary>
            For local shared objects, purges all of the data and deletes the shared object from the disk.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.flush(System.Int32)">
            <summary>
            Immediately writes a locally persistent shared object to a local file.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.flush">
            <summary>
            Immediately writes a locally persistent shared object to a local file.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.getLocal(System.String,System.String,System.Boolean)">
            <summary>
            [static] Returns a reference to a locally persistent shared object that is only available to the current client.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.getLocal(System.String,System.String)">
            <summary>
            [static] Returns a reference to a locally persistent shared object that is only available to the current client.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.getLocal(System.String)">
            <summary>
            [static] Returns a reference to a locally persistent shared object that is only available to the current client.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.setDirty(System.String)">
            <summary>
            Indicates to the server that the value of a property in the shared object has changed.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.setProperty(System.String,System.Object)">
            <summary>
            Updates the value of a property in a shared object and indicates to the server that the value of the property has changed.
            </summary>
        </member>
        <member name="M:flash.net.SharedObject.setProperty(System.String)">
            <summary>
            Updates the value of a property in a shared object and indicates to the server that the value of the property has changed.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.client">
            <summary>
            Indicates the object on which callback methods are invoked.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.data">
            <summary>
            [read-only] The collection of attributes assigned to the data property of the object; these attributes can be shared and stored.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.defaultObjectEncoding">
            <summary>
            [static] The default object encoding (AMF version) for all local shared objects created in the SWF file.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.fps">
            <summary>
            [write-only] Specifies the number of times per second that a client's changes to a shared object are sent to the server.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.objectEncoding">
            <summary>
            The object encoding (AMF version) for this shared object.
            </summary>
        </member>
        <member name="P:flash.net.SharedObject.size">
            <summary>
            [read-only] The current size of the shared object, in bytes.
            </summary>
        </member>
        <member name="E:flash.net.SharedObject.asyncError">
            <summary>
            Dispatched when an exception is thrown asynchronously — that is, from native asynchronous code.
            </summary>
        </member>
        <member name="E:flash.net.SharedObject.netStatus">
            <summary>
            Dispatched when a SharedObject instance is reporting its status or error condition.
            </summary>
        </member>
        <member name="E:flash.net.SharedObject.sync">
            <summary>
            Dispatched when a remote shared object has been updated by the server.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.getMicrophone(System.Int32)">
            <summary>
            [static] Returns a reference to a Microphone object for capturing audio.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.getMicrophone">
            <summary>
            [static] Returns a reference to a Microphone object for capturing audio.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.setLoopBack(System.Boolean)">
            <summary>
            Routes audio captured by a microphone to the local speakers.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.setLoopBack">
            <summary>
            Routes audio captured by a microphone to the local speakers.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.setSilenceLevel(System.Double,System.Int32)">
            <summary>
            Sets the minimum input level that should be considered sound and (optionally) the amount of silent time signifying that silence has actually begun.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.setSilenceLevel(System.Double)">
            <summary>
            Sets the minimum input level that should be considered sound and (optionally) the amount of silent time signifying that silence has actually begun.
            </summary>
        </member>
        <member name="M:flash.media.Microphone.setUseEchoSuppression(System.Boolean)">
            <summary>
            Specifies whether to use the echo suppression feature of the audio codec.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.activityLevel">
            <summary>
            [read-only] The amount of sound the microphone is detecting.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.gain">
            <summary>
            The microphone gain—that is, the amount by which the microphone should multiply the signal before transmitting it.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.index">
            <summary>
            [read-only] The index of the microphone, as reflected in the array returned by Microphone.names.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.muted">
            <summary>
            [read-only] Specifies whether the user has denied access to the microphone (true) or allowed access (false).
            </summary>
        </member>
        <member name="P:flash.media.Microphone.name">
            <summary>
            [read-only] The name of the current sound capture device, as returned by the sound capture hardware.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.names">
            <summary>
            [static] [read-only] An array of strings containing the names of all available sound capture devices.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.rate">
            <summary>
            The rate at which the microphone captures sound, in kHz.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.silenceLevel">
            <summary>
            [read-only] The amount of sound required to activate the microphone and dispatch the activity event.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.silenceTimeout">
            <summary>
            [read-only] The number of milliseconds between the time the microphone stops detecting sound and the time the activity event is dispatched.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.soundTransform">
            <summary>
            Controls the sound of this microphone object when it is in loopback mode.
            </summary>
        </member>
        <member name="P:flash.media.Microphone.useEchoSuppression">
            <summary>
            [read-only] Set to true if echo suppression is enabled; false otherwise.
            </summary>
        </member>
        <member name="E:flash.media.Microphone.activity">
            <summary>
            Dispatched when a microphone begins or ends a session.
            </summary>
        </member>
        <member name="E:flash.media.Microphone.status">
            <summary>
            Dispatched when a microphone reports its status.
            </summary>
        </member>
        <member name="M:flash.media.Camera.getCamera(System.String)">
            <summary>
            [static] Returns a reference to a Camera object for capturing video.
            </summary>
        </member>
        <member name="M:flash.media.Camera.getCamera">
            <summary>
            [static] Returns a reference to a Camera object for capturing video.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setKeyFrameInterval(System.Int32)">
            <summary>
            Specifies which video frames are transmitted in full (called keyframes) instead of being interpolated by the video compression algorithm.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setLoopback(System.Boolean)">
            <summary>
            Specifies whether to use a compressed video stream for a local view of the camera.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setLoopback">
            <summary>
            Specifies whether to use a compressed video stream for a local view of the camera.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setMode(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Sets the camera capture mode to the native mode that best meets the specified requirements.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setMode(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the camera capture mode to the native mode that best meets the specified requirements.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setMotionLevel(System.Int32,System.Int32)">
            <summary>
            Specifies how much motion is required to dispatch the activity event.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setMotionLevel(System.Int32)">
            <summary>
            Specifies how much motion is required to dispatch the activity event.
            </summary>
        </member>
        <member name="M:flash.media.Camera.setQuality(System.Int32,System.Int32)">
            <summary>
            Sets the maximum amount of bandwidth per second or the required picture quality of the current outgoing video feed.
            </summary>
        </member>
        <member name="P:flash.media.Camera.activityLevel">
            <summary>
            [read-only] The amount of motion the camera is detecting.
            </summary>
        </member>
        <member name="P:flash.media.Camera.bandwidth">
            <summary>
            [read-only] The maximum amount of bandwidth the current outgoing video feed can use, in bytes.
            </summary>
        </member>
        <member name="P:flash.media.Camera.currentFPS">
            <summary>
            [read-only] The rate at which the camera is capturing data, in frames per second.
            </summary>
        </member>
        <member name="P:flash.media.Camera.fps">
            <summary>
            [read-only] The maximum rate at which the camera can capture data, in frames per second.
            </summary>
        </member>
        <member name="P:flash.media.Camera.height">
            <summary>
            [read-only] The current capture height, in pixels.
            </summary>
        </member>
        <member name="P:flash.media.Camera.index">
            <summary>
            [read-only] A zero-based integer that specifies the index of the camera, as reflected in the array returned by the names property.
            </summary>
        </member>
        <member name="P:flash.media.Camera.keyFrameInterval">
            <summary>
            [read-only] The number of video frames transmitted in full (called keyframes) instead of being interpolated by the video compression algorithm.
            </summary>
        </member>
        <member name="P:flash.media.Camera.loopback">
            <summary>
            [read-only] Indicates whether a local view of what the camera is capturing is compressed and decompressed (true), as it would be for live transmission using Flash Media Server, or uncompressed (false).
            </summary>
        </member>
        <member name="P:flash.media.Camera.motionLevel">
            <summary>
            [read-only] The amount of motion required to invoke the activity event.
            </summary>
        </member>
        <member name="P:flash.media.Camera.motionTimeout">
            <summary>
            [read-only] The number of milliseconds between the time the camera stops detecting motion and the time the activity event is invoked.
            </summary>
        </member>
        <member name="P:flash.media.Camera.muted">
            <summary>
            [read-only] A Boolean value indicating whether the user has denied access to the camera (true) or allowed access (false) in the Flash Player Privacy dialog box.
            </summary>
        </member>
        <member name="P:flash.media.Camera.name">
            <summary>
            [read-only] The name of the current camera, as returned by the camera hardware.
            </summary>
        </member>
        <member name="P:flash.media.Camera.names">
            <summary>
            [static] [read-only] An array of strings indicating the names of all available cameras without displaying the Flash Player Privacy dialog box.
            </summary>
        </member>
        <member name="P:flash.media.Camera.quality">
            <summary>
            [read-only] The required level of picture quality, as determined by the amount of compression being applied to each video frame.
            </summary>
        </member>
        <member name="P:flash.media.Camera.width">
            <summary>
            [read-only] The current capture width, in pixels.
            </summary>
        </member>
        <member name="E:flash.media.Camera.activity">
            <summary>
            Dispatched when a camera begins or ends a session.
            </summary>
        </member>
        <member name="E:flash.media.Camera.status">
            <summary>
            Dispatched when a camera reports its status.
            </summary>
        </member>
        <member name="M:flash.Global.Utils.decodeURI(System.String)">
            <summary>
            Decodes an encoded URI into a string. Returns a string in which all characters previously encoded by the encodeURI function are restored to their unencoded representation.
            </summary>
            <param name="uri">A string encoded with the <see cref="M:flash.Global.Utils.encodeURI(System.String)"/> function.</param>
            <returns>A string in which all characters previously escaped by the <see cref="M:flash.Global.Utils.encodeURI(System.String)"/> function are restored to their unescaped representation.</returns>
        </member>
        <member name="M:flash.Global.Utils.decodeURIComponent(System.String)">
            <summary>
            Decodes an encoded URI component into a string. Returns a string in which all characters previously escaped by the encodeURIComponent function are restored to their uncoded representation.
            </summary>
            <param name="uri">A string encoded with the encodeURIComponent function.</param>
            <returns>A string in which all characters previously escaped by the encodeURIComponent function are restored to their unescaped representation.</returns>
        </member>
        <member name="M:flash.Global.Utils.encodeURI(System.String)">
            <summary>
            Encodes a string into a valid URI (Uniform Resource Identifier). Converts a complete URI into a string in which all characters are encoded as UTF-8 escape sequences unless a character belongs to a small group of basic characters. 
            </summary>
            <param name="uri">A string representing a complete URI.</param>
            <returns>A string with certain characters encoded as UTF-8 escape sequences.</returns>
        </member>
        <member name="M:flash.Global.Utils.encodeURIComponent(System.String)">
            <summary>
            Encodes a string into a valid URI component. Converts a substring of a URI into a string in which all characters are encoded as UTF-8 escape sequences unless a character belongs to a very small group of basic characters. 
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Utils.escape(System.String)">
            <summary>
            Converts the parameter to a string and encodes it in a URL-encoded format, where most non-alphanumeric characters are replaced with % hexadecimal sequences. When used in a URL-encoded string, the percentage symbol ( % ) is used to introduce escape characters, and is not equivalent to the modulo operator ( % ).
            </summary>
            <param name="uri">The expression to convert into a string and encode in a URL-encoded format.</param>
            <returns>A URL-encoded string.</returns>
        </member>
        <member name="M:flash.Global.Utils.isFinite(flash.Global.Number)">
            <summary>
            Returns <c>true</c> if the value is a finite number, or <c>false</c> if the value is Infinity or -Infinity . The presence of Infinity or -Infinity indicates a mathematical error condition such as division by 0. 
            </summary>
            <param name="number">A number to evaluate as finite or infinite</param>
            <returns>Returns <c>true</c> if it is a finite number or <c>false</c> if it is infinity or negative infinity  </returns>
        </member>
        <member name="M:flash.Global.Utils.isNaN(flash.Global.Number)">
            <summary>
            Returns <c>true</c> if the value is NaN (not a number). The isNaN() function is useful for checking whether a mathematical expression evaluates successfully to a number. The most common use of isNaN() is to check the value returned from the parseInt() and parseFloat() functions. The NaN value is a special member of the Number data type that represents a value that is "not a number." 
            </summary>
            <param name="number">A numeric value or mathematical expression to evaluate.</param>
            <returns>Returns <c>true</c> if the value is NaN (not a number) and <c>false</c> otherwise. </returns>
        </member>
        <member name="M:flash.Global.Utils.isXMLName(System.String)">
            <summary>
            Determines whether the specified string is a valid name for an XML element or attribute.
            </summary>
            <param name="str">A string to evaluate.</param>
            <returns>Returns <c>true</c> if the <paramref name="str"/> argument is a valid XML name; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:flash.Global.Utils.parseFloat(System.String)">
            <summary>
            Converts a string to a floating-point number. The function reads, or parses , and returns the numbers in a string until it reaches a character that is not a part of the initial number. If the string does not begin with a number that can be parsed, parseFloat() returns NaN . White space preceding valid integers is ignored, as are trailing non-numeric characters.
            </summary>
            <param name="str">The string to read and convert to a floating-point number. </param>
            <returns>A number or NaN (not a number).</returns>
        </member>
        <member name="M:flash.Global.Utils.parseInt(System.String,System.UInt32)">
            <summary>
            Converts a string to an integer. If the specified string in the parameters cannot be converted to a number, the function returns NaN . Strings beginning with 0x are interpreted as hexadecimal numbers. Unlike in previous versions of ActionScript, integers beginning with 0 are not interpreted as octal numbers. You must specify a radix of 8 for octal numbers. White space and zeroes preceding valid integers are ignored, as are trailing non-numeric characters.
            </summary>
            <param name="str">A string to convert to an integer.</param>
            <param name="radix">An integer representing the radix (base) of the number to parse. Legal values are from 2 to 36.</param>
            <returns>A number or NaN (not a number).</returns>
        </member>
        <member name="M:flash.Global.Utils.unescape(System.String)">
            <summary>
            Evaluates the parameter stir as a string, decodes the string from URL-encoded format (converting all hexadecimal sequences to ASCII characters), and returns the string. 
            </summary>
            <param name="str">A string with hexadecimal sequences to escape.</param>
            <returns>A string decoded from a URL-encoded parameter.</returns>
        </member>
        <member name="M:flash.Global.Function.apply(System.Object,System.Object[])">
            <summary>
            Specifies the value of thisObject to be used within any function that ActionScript calls.
            </summary>
            <param name="thisObject">An object that specifies the value of thisObject within the function body. </param>
            <param name="argArray"></param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Function.call(System.Object,System.Object[])">
            <summary>
            Invokes the function represented by a Function object.
            </summary>
            <param name="thisObject">An object that specifies the value of thisObject within the function body. </param>
            <param name="arguments">The parameter or parameters to be passed to the function. You can specify zero or more parameters.</param>
            <returns></returns>
        </member>
        <member name="M:flash.Global.Function.call(System.Object)">
            <summary>
            Invokes the function represented by a Function object.
            </summary>
            <param name="thisObject">An object that specifies the value of thisObject within the function body. </param>
            <returns></returns>
        </member>
        <member name="F:flash.events.ContextMenuEvent.MENU_ITEM_SELECT">
            <summary>
            Defines the value of the type property of a menuItemSelect event object.
            </summary>
        </member>
        <member name="F:flash.events.ContextMenuEvent.MENU_SELECT">
            <summary>
            Defines the value of the type property of a menuSelect event object.
            </summary>
        </member>
        <member name="P:flash.events.ContextMenuEvent.contextMenuOwner">
            <summary>
            The display list object to which the menu is attached.
            </summary>
        </member>
        <member name="P:flash.events.ContextMenuEvent.mouseTarget">
            <summary>
            The display list object on which the user right-clicked to display the context menu.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.complete">
            <summary>
            Dispatched when data has loaded successfully.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.httpStatus">
            <summary>
            Dispatched when a network request is made over HTTP and an HTTP status code can be detected.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.init">
            <summary>
            Dispatched when the properties and methods of a loaded SWF file are accessible.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.ioError">
            <summary>
            Dispatched when an input or output error occurs that causes a load operation to fail.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.open">
            <summary>
            Dispatched when a load operation starts.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.progress">
            <summary>
            Dispatched when data is received as the download operation progresses.
            </summary>
        </member>
        <member name="E:flash.display.LoaderInfo.unload">
            <summary>
            Dispatched by a <see cref="T:flash.display.LoaderInfo"/> object whenever a loaded object is removed by using the unload() method of the Loader object, or when a second load is performed by the same Loader object and the original content is removed prior to the load beginning.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.BITMAP_FORMAT">
            <summary>
            Image data (AIR only).
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.FILE_LIST_FORMAT">
            <summary>
            An array of files (AIR only).
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.HTML_FORMAT">
            <summary>
            HTML data.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.RICH_TEXT_FORMAT">
            <summary>
            Rich Text Format data.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.TEXT_FORMAT">
            <summary>
            String data.
            </summary>
        </member>
        <member name="F:flash.desktop.ClipboardFormats.URL_FORMAT">
            <summary>
            A URL string (AIR only).
            </summary>
        </member>
        <member name="M:flash.text.StyleSheet.clear">
            <summary>
            Removes all styles from the style sheet object.
            </summary>
        </member>
        <member name="M:flash.text.StyleSheet.getStyle(System.String)">
            <summary>
            Returns a copy of the style object associated with the style named <paramref name="styleName"/>.
            </summary>
        </member>
        <member name="M:flash.text.StyleSheet.parseCSS(System.String)">
            <summary>
            Parses the CSS in <paramref name="CSSText"/> and loads the style sheet with it.
            </summary>
        </member>
        <member name="M:flash.text.StyleSheet.setStyle(System.String,System.Object)">
            <summary>
            Adds a new style with the specified name to the style sheet object.
            </summary>
        </member>
        <member name="M:flash.text.StyleSheet.transform(System.Object)">
            <summary>
            Extends the CSS parsing capability.
            </summary>
        </member>
        <member name="M:flash.net.URLRequestHeader.#ctor(System.String,System.String)">
            <summary>
            Creates a new URLRequestHeader object that encapsulates a single HTTP request header.
            </summary>
        </member>
        <member name="M:flash.net.URLRequestHeader.#ctor(System.String)">
            <summary>
            Creates a new URLRequestHeader object that encapsulates a single HTTP request header.
            </summary>
        </member>
        <member name="M:flash.net.URLRequestHeader.#ctor">
            <summary>
            Creates a new URLRequestHeader object that encapsulates a single HTTP request header.
            </summary>
        </member>
        <member name="P:flash.net.URLRequestHeader.name">
            <summary>
            An HTTP request header name (such as Content-Type or SOAPAction).
            </summary>
        </member>
        <member name="P:flash.net.URLRequestHeader.value">
            <summary>
            The value associated with the name property (such as text/plain).
            </summary>
        </member>
        <member name="M:flash.Global.EOFError.#ctor(System.String)">
            <summary>
            An EOFError exception is thrown when you attempt to read past the end of the available data. For example, an EOFError is thrown when one of the read methods in the IDataInput interface is called and there is insufficient data to satisfy the read request.
            </summary>
            <param name="pMessage">A string associated with the error object. </param>
        </member>
        <member name="F:flash.Global.Math.E">
            <summary>
            [static] A mathematical constant for the base of natural logarithms, expressed as e.
            </summary>
        </member>
        <member name="F:flash.Global.Math.LN10">
            <summary>
            [static] A mathematical constant for the natural logarithm of 10, expressed as loge10, with an approximate value of 2.302585092994046.
            </summary>
        </member>
        <member name="F:flash.Global.Math.LN2">
            <summary>
            [static] A mathematical constant for the natural logarithm of 2, expressed as loge2, with an approximate value of 0.6931471805599453.
            </summary>
        </member>
        <member name="F:flash.Global.Math.LOG10E">
            <summary>
            [static] A mathematical constant for the base-10 logarithm of the constant e (Math.E), expressed as log10e, with an approximate value of 0.4342944819032518.
            </summary>
        </member>
        <member name="F:flash.Global.Math.LOG2E">
            <summary>
            [static] A mathematical constant for the base-2 logarithm of the constant e, expressed as log2e, with an approximate value of 1.442695040888963387.
            </summary>
        </member>
        <member name="F:flash.Global.Math.PI">
            <summary>
            [static] A mathematical constant for the ratio of the circumference of a circle to its diameter, expressed as pi, with a value of 3.141592653589793.
            </summary>
        </member>
        <member name="F:flash.Global.Math.SQRT1_2">
            <summary>
            [static] A mathematical constant for the square root of one-half, with an approximate value of 0.7071067811865476.
            </summary>
        </member>
        <member name="F:flash.Global.Math.SQRT2">
            <summary>
            [static] A mathematical constant for the square root of 2, with an approximate value of 1.4142135623730951.
            </summary>
        </member>
        <member name="M:flash.Global.Math.abs(System.Double)">
            <summary>
            [static] Computes and returns an absolute value for the number specified by the parameter val.
            </summary>
        </member>
        <member name="M:flash.Global.Math.acos(System.Double)">
            <summary>
            [static] Computes and returns the arc cosine of the number specified in the parameter val, in radians.
            </summary>
        </member>
        <member name="M:flash.Global.Math.asin(System.Double)">
            <summary>
            [static] Computes and returns the arc sine for the number specified in the parameter val, in radians.
            </summary>
        </member>
        <member name="M:flash.Global.Math.atan(System.Double)">
            <summary>
            [static] Computes and returns the value, in radians, of the angle whose tangent is specified in the parameter val.
            </summary>
        </member>
        <member name="M:flash.Global.Math.atan2(System.Double,System.Double)">
            <summary>
            [static] Computes and returns the angle of the point y/x in radians, when measured counterclockwise from a circle's x axis (where 0,0 represents the center of the circle).
            </summary>
        </member>
        <member name="M:flash.Global.Math.ceil(System.Double)">
            <summary>
            [static] Returns the ceiling of the specified number or expression.
            </summary>
        </member>
        <member name="M:flash.Global.Math.cos(System.Double)">
            <summary>
            [static] Computes and returns the cosine of the specified angle in radians.
            </summary>
        </member>
        <member name="M:flash.Global.Math.exp(System.Double)">
            <summary>
            [static] Returns the value of the base of the natural logarithm (e), to the power of the exponent specified in the parameter val.
            </summary>
        </member>
        <member name="M:flash.Global.Math.floor(System.Double)">
            <summary>
            [static] Returns the floor of the number or expression specified in the parameter val.
            </summary>
        </member>
        <member name="M:flash.Global.Math.log(System.Double)">
            <summary>
            [static] Returns the natural logarithm of the parameter val.
            </summary>
        </member>
        <member name="M:flash.Global.Math.max(System.Double,System.Double,System.Object)">
            <summary>
            [static] Evaluates val1 and val2 (or more values) and returns the largest value.
            </summary>
        </member>
        <member name="M:flash.Global.Math.max(System.Double,System.Double)">
            <summary>
            [static] Evaluates val1 and val2 (or more values) and returns the largest value.
            </summary>
        </member>
        <member name="M:flash.Global.Math.min(System.Double,System.Double,System.Object)">
            <summary>
            [static] Evaluates val1 and val2 (or more values) and returns the smallest value.
            </summary>
        </member>
        <member name="M:flash.Global.Math.min(System.Double,System.Double)">
            <summary>
            [static] Evaluates val1 and val2 (or more values) and returns the smallest value.
            </summary>
        </member>
        <member name="M:flash.Global.Math.pow(System.Double,System.Double)">
            <summary>
            [static] Computes and returns val1 to the power of val2.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:flash.Global.Math.random" -->
        <member name="M:flash.Global.Math.round(System.Double)">
            <summary>
            [static] Rounds the value of the parameter val up or down to the nearest integer and returns the value.
            </summary>
        </member>
        <member name="M:flash.Global.Math.sin(System.Double)">
            <summary>
            [static] Computes and returns the sine of the specified angle in radians.
            </summary>
        </member>
        <member name="M:flash.Global.Math.sqrt(System.Double)">
            <summary>
            [static] Computes and returns the square root of the specified number.
            </summary>
        </member>
        <member name="M:flash.Global.Math.tan(System.Double)">
            <summary>
            [static] Computes and returns the tangent of the specified angle.
            </summary>
        </member>
        <member name="F:flash.geom.Point.length">
            <summary>
            The length of the line segment from (0,0) to this point.
            </summary>
        </member>
        <member name="F:flash.geom.Point.x">
            <summary>
            The horizontal coordinate of the point.
            </summary>
        </member>
        <member name="F:flash.geom.Point.y">
            <summary>
            The vertical coordinate of the point.
            </summary>
        </member>
        <member name="M:flash.geom.Point.add(flash.geom.Point)">
            <summary>
            Adds the coordinates of another point to the coordinates of this point to create a new point.
            </summary>
            <param name="point">The point to be added.</param>
            <returns>The new point.</returns>
        </member>
        <member name="M:flash.geom.Point.clone">
            <summary>
            Creates a copy of this Point object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.alpha">
            <summary>
            The alpha transparency value of the substitute color.
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.bias">
            <summary>
            The amount of bias to add to the result of the matrix transformation
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.clamp">
            <summary>
            Indicates whether the image should be clamped.
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.color">
            <summary>
            The hexadecimal color to substitute for pixels that are off the source image.
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.divisor">
            <summary>
            The divisor used during matrix transformation.
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.matrix">
            <summary>
            An array of values used for matrix transformation.
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.matrixX">
            <summary>
            The x dimension of the matrix (the number of columns in the matrix).
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.matrixY">
            <summary>
            The y dimension of the matrix (the number of rows in the matrix).
            </summary>
        </member>
        <member name="F:flash.filters.ConvolutionFilter.preserveAlpha">
            <summary>
            Indicates if the alpha channel is preserved without the filter effect or if the convolution filter is applied to the alpha channel as well as the color channels.
            </summary>
        </member>
        <member name="F:flash.events.ErrorEvent.ERROR">
            <summary>
            Defines the value of the type property of an error event object.
            </summary>
        </member>
        <member name="F:flash.events.ErrorEvent.errorID">
            <summary>
            [read-only] Contains the reference number associated with the specific error.
            </summary>
        </member>
        <member name="M:flash.events.ErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates an Event object that contains information about error events.
            </summary>
        </member>
        <member name="M:flash.events.ErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an Event object that contains information about error events.
            </summary>
        </member>
        <member name="M:flash.events.ErrorEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an Event object that contains information about error events.
            </summary>
        </member>
        <member name="M:flash.events.ErrorEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an Event object that contains information about error events.
            </summary>
        </member>
        <member name="M:flash.events.ErrorEvent.#ctor(System.String)">
            <summary>
            Creates an Event object that contains information about error events.
            </summary>
        </member>
        <member name="F:flash.events.IOErrorEvent.IO_ERROR">
            <summary>
            Defines the value of the type property of an ioError event object.
            </summary>
        </member>
        <member name="M:flash.events.IOErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates an Event object that contains specific information about ioError events.
            </summary>
        </member>
        <member name="M:flash.events.IOErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an Event object that contains specific information about ioError events.
            </summary>
        </member>
        <member name="M:flash.events.IOErrorEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an Event object that contains specific information about ioError events.
            </summary>
        </member>
        <member name="M:flash.events.IOErrorEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an Event object that contains specific information about ioError events.
            </summary>
        </member>
        <member name="M:flash.events.IOErrorEvent.#ctor(System.String)">
            <summary>
            Creates an Event object that contains specific information about ioError events.
            </summary>
        </member>
        <member name="F:flash.events.AsyncErrorEvent.ASYNC_ERROR">
            <summary>
            [static] The <see cref="T:flash.events.AsyncErrorEvent"/>.ASYNC_ERROR constant defines the value of the type property of an asyncError event object.
            </summary>
        </member>
        <member name="M:flash.events.AsyncErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String,flash.Global.Error)">
            <summary>
            Creates an AsyncErrorEvent object that contains information about asyncError events.
            </summary>
        </member>
        <member name="M:flash.events.AsyncErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an AsyncErrorEvent object that contains information about asyncError events.
            </summary>
        </member>
        <member name="M:flash.events.AsyncErrorEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an AsyncErrorEvent object that contains information about asyncError events.
            </summary>
        </member>
        <member name="M:flash.events.AsyncErrorEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an AsyncErrorEvent object that contains information about asyncError events.
            </summary>
        </member>
        <member name="M:flash.events.AsyncErrorEvent.#ctor(System.String)">
            <summary>
            Creates an AsyncErrorEvent object that contains information about asyncError events.
            </summary>
        </member>
        <member name="P:flash.events.AsyncErrorEvent.error">
            <summary>
            The exception that was thrown.
            </summary>
        </member>
        <member name="T:System.Boolean">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Boolean.#ctor(System.Object)">
            <summary>
            Creates a Boolean object with the specified value. If you omit the expression parameter, the Boolean object is initialized with a value of <see langword="false"/>. If you specify a value for the expression parameter, the method evaluates it and returns the result as a Boolean value according to the rules in the global Boolean() function. 
            </summary>
            <param name="expression">Any expression</param>
        </member>
        <member name="F:flash.display.StageAlign.BOTTOM">
            <summary>
            Specifies that the Stage is aligned at the bottom.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.BOTTOM_LEFT">
            <summary>
            Specifies that the Stage is aligned in the bottom-left corner.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.BOTTOM_RIGHT">
            <summary>
            Specifies that the Stage is aligned in the bottom-right corner.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.LEFT">
            <summary>
            Specifies that the Stage is aligned on the left.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.RIGHT">
            <summary>
            Specifies that the Stage is aligned to the right.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.TOP">
            <summary>
            Specifies that the Stage is aligned at the top.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.TOP_LEFT">
            <summary>
            Specifies that the Stage is aligned in the top-left corner.
            </summary>
        </member>
        <member name="F:flash.display.StageAlign.TOP_RIGHT">
            <summary>
            Specifies that the Stage is aligned in the top-right corner.
            </summary>
        </member>
        <member name="F:flash.display.InterpolationMethod.LINEAR_RGB">
            <summary>
            Specifies that the linear RGB interpolation method should be used.
            </summary>
        </member>
        <member name="F:flash.display.InterpolationMethod.RGB">
            <summary>
            Specifies that the RGB interpolation method should be used.
            </summary>
        </member>
        <member name="F:flash.display.GradientType.LINEAR">
            <summary>
            [static] Value used to specify a linear gradient fill.
            </summary>
        </member>
        <member name="F:flash.display.GradientType.RADIAL">
            <summary>
            [static] Value used to specify a radial gradient fill.
            </summary>
        </member>
        <member name="F:flash.desktop.Clipboard.formats">
            <summary>
            An array of strings containing the names of the data formats available in this Clipboard object.
            </summary>
        </member>
        <member name="F:flash.desktop.Clipboard.generalClipboard">
            <summary>
            The operating system clipboard.
            </summary>
        </member>
        <member name="M:flash.desktop.Clipboard.clear">
            <summary>
            Deletes all data representations from this Clipboard object.
            </summary>
        </member>
        <member name="M:flash.desktop.Clipboard.clearData(flash.desktop.ClipboardFormats)">
            <summary>
            Deletes the data representation for the specified format.
            </summary>
            <param name="pFormat">The data format to remove.</param>
        </member>
        <member name="M:flash.desktop.Clipboard.getData(flash.desktop.ClipboardFormats,flash.desktop.ClipboardTransferMode)">
            <summary>
            Gets the clipboard data if data in the specified format is present. Flash Player requires a user event (such as a key press or mouse click) before using getData() . Call getData() within a user initiated paste event handler. In AIR, this restriction only applies to content outside of the application security sandbox. 
            </summary>
            <param name="pFormat">The data format to return</param>
            <param name="pTransferMode">Specifies whether to return a reference or serialized copy when an application-defined data format is accessed.</param>
            <returns>An object of the type corresponding to the data format.</returns>
            <exception cref="T:flash.Global.Error">transferMode is not one of the names defined in the <see cref="T:flash.desktop.ClipboardTransferMode"/> class.</exception>
            <exception cref="T:flash.Global.IllegalOperationError">The Clipboard object requested is no longer in scope (AIR only).</exception>
            <exception cref="T:flash.Global.SecurityError">Reading from or writing to the clipboard is not permitted in this context. In Flash Player, you can only call this method successfully during the processing of a user event (as in a key press or mouse click). In AIR, this restriction only applies to content outside of the application security sandbox.</exception>
        </member>
        <member name="M:flash.desktop.Clipboard.hasFormat(flash.desktop.ClipboardFormats)">
            <summary>
            Checks whether data in the specified format exists in this Clipboard object. 
            </summary>
            <param name="pFormat">The format type to check.</param>
            <returns><see langword="true"/> , if data in the specified format is present.</returns>
            <exception cref="T:flash.Global.IllegalOperationError">The Clipboard object requested is no longer in scope (AIR only).</exception>
            <exception cref="T:flash.Global.SecurityError">Reading from or writing to the clipboard is not permitted in this context.</exception>
        </member>
        <member name="M:flash.desktop.Clipboard.setData(flash.desktop.ClipboardFormats,System.Object,System.Boolean)">
            <summary>
            Adds a representation of the information to be transferred in the specified data format. Flash Player requires a user event (such as a key press or mouse click) before using setData() . In AIR, this restriction only applies to content outside of the application security sandbox. 
            </summary>
            <param name="pFormat">The information to add.</param>
            <param name="pData">The format of the data.</param>
            <param name="pSerializable">Specify <see langword="true"/> for objects that can be serialized (and deserialized).</param>
            <returns><see langword="true"/> if the data was successfully set; <see langword="false"/> otherwise. In Flash Player, returns <see langword="false"/> when format is an unsupported member of <see cref="T:flash.desktop.ClipboardFormats"/>. (Flash Player does not support <see cref="T:flash.desktop.ClipboardFormats"/>.URL_FORMAT , <see cref="T:flash.desktop.ClipboardFormats"/>.FILE_LIST_FORMAT , or <see cref="T:flash.desktop.ClipboardFormats"/>.BITMAP_FORMAT ).</returns>
            <exception cref="T:flash.Global.IllegalOperationError">The Clipboard object requested is no longer in scope (AIR only).</exception>
            <exception cref="T:flash.Global.SecurityError">Reading from or writing to the clipboard is not permitted in this context. In Flash Player, you can only call this method successfully during the processing of a user event (as in a key press or mouse click). In AIR, this restriction only applies to content outside of the application security sandbox.</exception>
            <exception cref="T:flash.Global.TypeError">format or data is <see langword="null"/>.</exception>
        </member>
        <member name="M:flash.desktop.Clipboard.setDataHandler(flash.desktop.ClipboardFormats,flash.desktop.Clipboard.ClipboardHandler,System.Boolean)">
            <summary>
            Adds a reference to a handler function that produces the data for the specified format on demand. Use this method to defer creation or rendering of the data until it is actually accessed. Flash Player requires a user event (such as a key press or mouse click) before using setDataHandler() . In AIR, this restriction only applies to content outside of the application security sandbox.
            </summary>
            <param name="pFormat">A function that returns the data to be transferred when called.</param>
            <param name="pHandler"></param>
            <param name="pSerializable">Specify <see langword="true"/> if the object returned by handler can be serialized (and deserialized).</param>
            <returns><see langword="true"/> if the handler was successfully set; <see langword="false"/> otherwise.</returns>
            <exception cref="T:flash.Global.TypeError">format or handler is <see langword="null"/>.</exception>
            <exception cref="T:flash.Global.IllegalOperationError">The Clipboard object requested is no longer in scope (AIR only).</exception>
            <exception cref="T:flash.Global.SecurityError">Reading from or writing to the clipboard is not permitted in this context. In Flash Player, you can only call this method successfully during the processing of a user event (such as a key press or mouse click). In AIR, this restriction only applies to content outside of the application security sandbox.</exception>
        </member>
        <member name="T:flash.Global.XML">
            <summary>
            The XML class contains methods and properties for working with XML objects. The XML class (along with the XMLList, Namespace, and QName classes) implements the powerful XML-handling standards defined in ECMAScript for XML (E4X) specification (ECMA-357 edition 2).
            </summary>
        </member>
        <member name="M:flash.Global.XML.addNamespace(flash.Global.Namespace)">
            <summary>
            Adds a namespace to the set of in-scope namespaces for the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.appendChild(flash.Global.XML)">
            <summary>
            Appends the given child to the end of the XML object's properties.
            </summary>
        </member>
        <member name="M:flash.Global.XML.attribute(System.String)">
            <summary>
            Returns the XML value of the attribute that has the name matching the attributeName parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.attributes">
            <summary>
            Returns a list of attribute values for the given XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.child(System.String)">
            <summary>
            Lists the children of an XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.childIndex">
            <summary>
            Identifies the zero-indexed position of this XML object within the context of its parent.
            </summary>
        </member>
        <member name="M:flash.Global.XML.children">
            <summary>
            Lists the children of the XML object in the sequence in which they appear.
            </summary>
        </member>
        <member name="M:flash.Global.XML.comments">
            <summary>
            Lists the properties of the XML object that contain XML comments.
            </summary>
        </member>
        <member name="M:flash.Global.XML.contains(flash.Global.XML)">
            <summary>
            Compares the XML object against the given value parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.copy">
            <summary>
            Returns a copy of the given XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.defaultSettings">
            <summary>
            [static] Returns an object with the following properties set to the default values: ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent, and prettyPrinting.
            </summary>
        </member>
        <member name="M:flash.Global.XML.descendants(System.String)">
            <summary>
            Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object that have the given name parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.descendants">
            <summary>
            Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object that have the given name parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.elements(System.String)">
            <summary>
            Lists the elements of an XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.elements">
            <summary>
            Lists the elements of an XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.hasComplexContent">
            <summary>
            Checks to see whether the XML object contains complex content.
            </summary>
        </member>
        <member name="M:flash.Global.XML.hasOwnProperty(System.String)">
            <summary>
            Checks to see whether the object has the property specified by the p parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.hasSimpleContent">
            <summary>
            Checks to see whether the XML object contains simple content.
            </summary>
        </member>
        <member name="M:flash.Global.XML.inScopeNamespaces">
            <summary>
            Lists the namespaces for the XML object, based on the object's parent.
            </summary>
        </member>
        <member name="M:flash.Global.XML.insertChildAfter(System.Object,System.Object)">
            <summary>
            Inserts the given child2 parameter after the child1 parameter in this XML object and returns the resulting object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.insertChildBefore(System.Object,System.Object)">
            <summary>
            Inserts the given child2 parameter before the child1 parameter in this XML object and returns the resulting object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.length">
            <summary>
            For XML objects, this method always returns the integer 1.
            </summary>
        </member>
        <member name="M:flash.Global.XML.localName">
            <summary>
            Gives the local name portion of the qualified name of the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.name">
            <summary>
            Gives the qualified name for the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.namespace(System.String)">
            <summary>
            If no parameter is provided, gives the namespace associated with the qualified name of this XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.namespace">
            <summary>
            If no parameter is provided, gives the namespace associated with the qualified name of this XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.namespaceDeclarations">
            <summary>
            Lists namespace declarations associated with the XML object in the context of its parent.
            </summary>
        </member>
        <member name="M:flash.Global.XML.nodeKind">
            <summary>
            Specifies the type of node: text, comment, processing-instruction, attribute, or element.
            </summary>
        </member>
        <member name="M:flash.Global.XML.normalize">
            <summary>
            For the XML object and all descendant XML objects, merges adjacent text nodes and eliminates empty text nodes.
            </summary>
        </member>
        <member name="M:flash.Global.XML.parent">
            <summary>
            Returns the parent of the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.prependChild(System.Object)">
            <summary>
            Inserts a copy of the provided child object into the XML element before any existing XML properties for that element.
            </summary>
        </member>
        <member name="M:flash.Global.XML.processingInstructions(System.String)">
            <summary>
            If a name parameter is provided, lists all the children of the XML object that contain processing instructions with that name.
            </summary>
        </member>
        <member name="M:flash.Global.XML.processingInstructions">
            <summary>
            If a name parameter is provided, lists all the children of the XML object that contain processing instructions with that name.
            </summary>
        </member>
        <member name="M:flash.Global.XML.propertyIsEnumerable(System.String)">
            <summary>
            Checks whether the property p is in the set of properties that can be iterated in a for..in statement applied to the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.removeNamespace(flash.Global.Namespace)">
            <summary>
            Removes the given namespace for this object and all descendants.
            </summary>
        </member>
        <member name="M:flash.Global.XML.replace(System.Object,flash.Global.XML)">
            <summary>
            Replaces the properties specified by the propertyName parameter with the given value parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.setChildren(System.Object)">
            <summary>
            Replaces the child properties of the XML object with the specified set of XML properties, provided in the value parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.setLocalName(System.String)">
            <summary>
            Changes the local name of the XML object to the given name parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XML.setName(System.String)">
            <summary>
            Sets the name of the XML object to the given qualified name or attribute name.
            </summary>
        </member>
        <member name="M:flash.Global.XML.setNamespace(flash.Global.Namespace)">
            <summary>
            Sets the namespace associated with the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.setSettings(flash.Global.XMLSettings)">
            <summary>
            [static] Sets values for the following XML properties: ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent, and prettyPrinting.
            </summary>
        </member>
        <member name="M:flash.Global.XML.settings">
            <summary>
            [static] Retrieves the following properties: ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent, and prettyPrinting.
            </summary>
        </member>
        <member name="M:flash.Global.XML.text">
            <summary>
            Returns an XMLList object of all XML properties of the XML object that represent XML text nodes.
            </summary>
        </member>
        <member name="M:flash.Global.XML.toXMLString">
            <summary>
            Returns a string representation of the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.valueOf">
            <summary>
            Returns the XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XML.#ctor(System.Object)">
            <summary>
            Creates a new XML object.
            </summary>
        </member>
        <member name="P:flash.Global.XML.ignoreComments">
            <summary>
            [static] Determines whether XML comments are ignored when XML objects parse the source XML data.
            </summary>
        </member>
        <member name="P:flash.Global.XML.ignoreProcessingInstructions">
            <summary>
            [static] Determines whether XML processing instructions are ignored when XML objects parse the source XML data.
            </summary>
        </member>
        <member name="P:flash.Global.XML.ignoreWhitespace">
            <summary>
            [static] Determines whether white space characters at the beginning and end of text nodes are ignored during parsing.
            </summary>
        </member>
        <member name="P:flash.Global.XML.prettyIndent">
            <summary>
            [static] Determines the amount of indentation applied by the toString() and toXMLString() methods when the XML.prettyPrinting property is set to true.
            </summary>
        </member>
        <member name="P:flash.Global.XML.prettyPrinting">
            <summary>
            [static] Determines whether the toString() and toXMLString() methods normalize white space characters between some tags.
            </summary>
        </member>
        <member name="T:flash.Global.Number">
            <summary>
            A data type representing an IEEE-754 double-precision floating-point number. You can manipulate primitive numeric values by using the methods and properties associated with the Number class. This class is identical to the JavaScript Number class.
            </summary>
        </member>
        <member name="F:flash.Global.Number.MAX_VALUE">
            <summary>
            The largest representable number (double-precision IEEE-754).
            </summary>
        </member>
        <member name="F:flash.Global.Number.MIN_VALUE">
            <summary>
            The smallest representable non-negative, non-zero, number (double-precision IEEE-754).
            </summary>
        </member>
        <member name="F:flash.Global.Number.NaN">
            <summary>
            The IEEE-754 value representing Not a Number (NaN).
            </summary>
        </member>
        <member name="F:flash.Global.Number.NEGATIVE_INFINITY">
            <summary>
            Specifies the IEEE-754 value representing negative infinity.
            </summary>
        </member>
        <member name="F:flash.Global.Number.POSITIVE_INFINITY">
            <summary>
            Specifies the IEEE-754 value representing positive infinity.
            </summary>
        </member>
        <member name="M:flash.Global.Number.toExponential(System.UInt32)">
            <summary>
            Returns a string representation of the number in exponential notation. The string contains one digit before the decimal point and up to 20 digits after the decimal point, as specified by the <paramref name="fractionDigits"/> parameter. 
            </summary>
            <param name="fractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the <paramref name="fractionDigits"/> argument is outside the range 0 to 20. </exception>
        </member>
        <member name="M:flash.Global.Number.toFixed(System.UInt32)">
            <summary>
            Returns a string representation of the number in fixed-point notation. Fixed-point notation means that the string will contain a specific number of digits after the decimal point, as specified in the <paramref name="fractionDigits"/> parameter. The valid range for the <paramref name="fractionDigits"/> parameter is from 0 to 20. Specifying a value outside this range throws an exception. 
            </summary>
            <param name="fractionDigits">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the <paramref name="fractionDigits"/> argument is outside the range 0 to 20. </exception>
        </member>
        <member name="M:flash.Global.Number.toPrecision(System.UInt32)">
            <summary>
            Returns a string representation of the number either in exponential notation or in fixed-point notation. The string will contain the number of digits specified in the precision parameter. 
            </summary>
            <param name="precision">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.</param>
            <returns></returns>
            <exception cref="T:flash.Global.RangeError">Throws an exception if the <paramref name="precision"/> argument is outside the range 0 to 21. </exception>
        </member>
        <member name="F:flash.events.StatusEvent.STATUS">
            <summary>
            Defines the value of the type property of a status event object.
            </summary>
        </member>
        <member name="P:flash.events.StatusEvent.code">
            <summary>
            A description of the object's status.
            </summary>
        </member>
        <member name="P:flash.events.StatusEvent.level">
            <summary>
            The category of the message, such as "status", "warning" or "error".
            </summary>
        </member>
        <member name="F:flash.events.FocusEvent.FOCUS_IN">
            <summary>
            Defines the value of the type property of a focusIn event object.
            </summary>
        </member>
        <member name="F:flash.events.FocusEvent.FOCUS_OUT">
            <summary>
            Defines the value of the type property of a focusOut event object.
            </summary>
        </member>
        <member name="F:flash.events.FocusEvent.KEY_FOCUS_CHANGE">
            <summary>
            Defines the value of the type property of a keyFocusChange event object.
            </summary>
        </member>
        <member name="F:flash.events.FocusEvent.MOUSE_FOCUS_CHANGE">
            <summary>
            Defines the value of the type property of a mouseFocusChange event object.
            </summary>
        </member>
        <member name="P:flash.events.FocusEvent.keyCode">
            <summary>
            The key code value of the key pressed to trigger a keyFocusChange event.
            </summary>
        </member>
        <member name="P:flash.events.FocusEvent.relatedObject">
            <summary>
            A reference to the complementary <see cref="T:flash.display.InteractiveObject"/> instance that is affected by the change in focus.
            </summary>
        </member>
        <member name="P:flash.events.FocusEvent.shiftKey">
            <summary>
            Indicates whether the Shift key modifier is activated, in which case the value is true.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeBytes(flash.utils.ByteArray,System.UInt32,System.UInt32)">
            <summary>
            Writes a sequence of bytes from the specified byte array, bytes, starting offset(zero-based index) bytes with a length specified by length, into the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeBytes(flash.utils.ByteArray,System.UInt32)">
            <summary>
            Writes a sequence of bytes from the specified byte array, bytes, starting offset(zero-based index) bytes with a length specified by length, into the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeBytes(flash.utils.ByteArray)">
            <summary>
            Writes a sequence of bytes from the specified byte array, bytes, starting offset(zero-based index) bytes with a length specified by length, into the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeDouble(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating point number.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeFloat(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating point number.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeInt(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeMultiByte(System.String,System.String)">
            <summary>
            Writes a multibyte string to the file stream, byte stream, or byte array, using the specified character set.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeObject(System.Object)">
            <summary>
            Writes an object to the file stream, byte stream, or byte array, in AMF serialized format.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeShort(System.Int16)">
            <summary>
            Writes a 16-bit integer.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeUnsignedInt(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the file stream, byte stream, or byte array.
            </summary>
        </member>
        <member name="M:flash.utils.IDataOutput.writeUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string.
            </summary>
        </member>
        <member name="P:flash.utils.IDataOutput.endian">
            <summary>
            The byte order for the data, either the BIG_ENDIAN or LITTLE_ENDIAN constant from the Endian class.
            </summary>
        </member>
        <member name="P:flash.utils.IDataOutput.objectEncoding">
            <summary>
            Used to determine whether the AMF3 or AMF0 format is used when writing or reading binary data using the writeObject() method.
            </summary>
        </member>
        <member name="F:flash.utils.ByteArray.defaultObjectEncoding">
            <summary>
            Denotes the default object encoding for the <see cref="T:flash.utils.ByteArray"/> class to use for a new <see cref="T:flash.utils.ByteArray"/> instance.
            </summary>
        </member>
        <member name="F:flash.utils.ByteArray.length">
            <summary>
            The length of the <see cref="T:flash.utils.ByteArray"/> object, in bytes.
            </summary>
        </member>
        <member name="F:flash.utils.ByteArray.position">
            <summary>
            Moves, or returns the current position, in bytes, of the file pointer into the <see cref="T:flash.utils.ByteArray"/> object.
            </summary>
        </member>
        <member name="M:flash.utils.ByteArray.clear">
            <summary>
            Clears the contents of the byte array and resets the length and position properties to 0. Calling this method explicitly frees up the memory used by the ByteArray instance. 
            </summary>
        </member>
        <member name="M:flash.utils.ByteArray.compress(flash.utils.CompressionAlgorithm)">
            <summary>
            Compresses the byte array. The entire byte array is compressed. For content running in Adobe AIR, you can specify a compression algorithm by passing a value (defined in the CompressionAlgorithm class) as the algorithm parameter. Flash Player supports only the default algorithm, zlib. 
            </summary>
            <param name="pAlgorithm">The compression algorithm to use when compressing. Valid values are defined as constants in the <see cref="T:flash.utils.CompressionAlgorithm"/> class. The default is to use zlib format. This parameter is only recognized for content running in Adobe AIR. Flash Player supports only the default algorithm, zlib, and throws an exception if you attempt to pass a value for this parameter. Calling compress( <see cref="T:flash.utils.CompressionAlgorithm"/>.DEFLATE) has the same effect as calling the deflate() method.</param>
        </member>
        <member name="M:flash.utils.ByteArray.compress">
            <summary>
            Compresses the byte array. The entire byte array is compressed. For content running in Adobe AIR, you can specify a compression algorithm by passing a value (defined in the CompressionAlgorithm class) as the algorithm parameter. Flash Player supports only the default algorithm, zlib. 
            </summary>
        </member>
        <member name="M:flash.utils.ByteArray.deflate">
            <summary>
            Compresses the byte array using the deflate compression algorithm. The entire byte array is compressed. 
            </summary>
        </member>
        <member name="M:flash.utils.ByteArray.inflate">
            <summary>
            Decompresses the byte array using the deflate compression algorithm. The byte array must have been compressed using the same algorithm. 
            </summary>
            <exception cref="T:flash.Global.IOError">The data is not valid compressed data; it was not compressed with the same compression algorithm used to compress.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readBoolean">
            <summary>
            Reads a Boolean value from the byte stream. A single byte is read, and true is returned if the byte is nonzero, false otherwise. 
            </summary>
            <returns>Returns true if the byte is nonzero, false otherwise. </returns>
            <exception cref="T:flash.Global.EOFError"></exception>
        </member>
        <member name="M:flash.utils.ByteArray.readByte">
            <summary>
            Reads a signed byte from the byte stream. The returned value is in the range -128 to 127.
            </summary>
            <returns>An integer between -128 and 127.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readBytes(flash.utils.ByteArray,System.UInt32,System.UInt32)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the byte stream. The bytes are read into the <see cref="T:flash.utils.ByteArray"/> object specified by the bytes parameter, and the bytes are written into the destination ByteArray starting at the position specified by offset . 
            </summary>
            <param name="pByteArray">The <see cref="T:flash.utils.ByteArray"/> object to read data into.</param>
            <param name="pOffset">The offset (position) in bytes at which the read data should be written. </param>
            <param name="pLength">The number of bytes to read. The default value of 0 causes all available data to be read.</param>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readBytes(flash.utils.ByteArray,System.UInt32)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the byte stream. The bytes are read into the <see cref="T:flash.utils.ByteArray"/> object specified by the bytes parameter, and the bytes are written into the destination ByteArray starting at the position specified by offset . 
            </summary>
            <param name="pByteArray">The <see cref="T:flash.utils.ByteArray"/> object to read data into.</param>
            <param name="pOffset">The offset (position) in bytes at which the read data should be written. </param>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readBytes(flash.utils.ByteArray)">
            <summary>
            Reads the number of data bytes, specified by the length parameter, from the byte stream. The bytes are read into the <see cref="T:flash.utils.ByteArray"/> object specified by the bytes parameter, and the bytes are written into the destination ByteArray starting at the position specified by offset . 
            </summary>
            <param name="pByteArray">The <see cref="T:flash.utils.ByteArray"/> object to read data into.</param>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readDouble">
            <summary>
            Reads an IEEE 754 double-precision (64-bit) floating-point number from the byte stream.
            </summary>
            <returns>A double-precision (64-bit) floating-point number.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readFloat">
            <summary>
            Reads an IEEE 754 single-precision (32-bit) floating-point number from the byte stream.
            </summary>
            <returns>A single-precision (32-bit) floating-point number.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readInt">
            <summary>
            Reads a signed 32-bit integer from the byte stream. The returned value is in the range -2147483648 to 2147483647.
            </summary>
            <returns>A 32-bit signed integer between -2147483648 and 2147483647.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readMultiByte(System.UInt32,System.String)">
            <summary>
            Reads a multibyte string of specified length from the byte stream using the specified character set.
            </summary>
            <param name="pLength">The number of bytes from the byte stream to read.</param>
            <param name="pCharset">The string denoting the character set to use to interpret the bytes. Possible character set strings include <c>shift-jis</c> , <c>cn-gb</c> , <c>iso-8859-1</c> , and others.</param>
            <returns>UTF-8 encoded string.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readObject">
            <summary>
            Reads an object from the byte array, encoded in AMF serialized format.
            </summary>
            <returns>The deserialized object.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readShort">
            <summary>
            Reads a signed 16-bit integer from the byte stream. The returned value is in the range -32768 to 32767.
            </summary>
            <returns>A 16-bit signed integer between -32768 and 32767.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readUnsignedInt">
            <summary>
            Reads an unsigned 32-bit integer from the byte stream. The returned value is in the range 0 to 4294967295.
            </summary>
            <returns>A 32-bit unsigned integer between 0 and 4294967295.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readUTF">
            <summary>
            Reads a UTF-8 string from the byte stream. The string is assumed to be prefixed with an unsigned short indicating the length in bytes.
            </summary>
            <returns>UTF-8 encoded string.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.readUTFBytes(System.UInt32)">
            <summary>
            Reads a sequence of UTF-8 bytes specified by the length parameter from the byte stream and returns a string. 
            </summary>
            <param name="pLength">An unsigned short indicating the length of the UTF-8 bytes.</param>
            <returns>A string composed of the UTF-8 bytes of the specified length.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.toString">
            <summary>
            Converts the byte array to a string. If the data in the array begins with a Unicode byte order mark, the application will honor that mark when converting to a string. If System.useCodePage is set to true , the application will treat the data in the array as being in the current system code page when converting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:flash.utils.ByteArray.uncompress(flash.utils.CompressionAlgorithm)">
            <summary>
            Decompresses the byte array. For content running in Adobe AIR, you can specify a compression algorithm by passing a value (defined in the CompressionAlgorithm class) as the algorithm parameter. The byte array must have been compressed using the same algorithm. Flash Player supports only the default algorithm, <c>zlib</c>.
            </summary>
            <param name="pAlgorithm">The compression algorithm to use when decompressing. This must be the same compression algorithm used to compress the data. Valid values are defined as constants in the CompressionAlgorithm class. The default is to use zlib format. This parameter is only recognized for content running in Adobe AIR. Flash Player supports only the default algorithm, zlib, and throws an exception if you attempt to pass a value for this parameter.</param>
            <exception cref="T:flash.Global.IOError">The data is not valid compressed data; it was not compressed with the same compression algorithm used to compress.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.uncompress">
            <summary>
            Decompresses the byte array. For content running in Adobe AIR, you can specify a compression algorithm by passing a value (defined in the CompressionAlgorithm class) as the algorithm parameter. The byte array must have been compressed using the same algorithm. Flash Player supports only the default algorithm, <c>zlib</c>.
            </summary>
            <exception cref="T:flash.Global.IOError">The data is not valid compressed data; it was not compressed with the same compression algorithm used to compress.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.writeBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value. A single byte is written according to the value parameter, either 1 if true or 0 if false .
            </summary>
            <param name="pBoolean">A Boolean value determining which byte is written. If the parameter is true , the method writes a 1; if false , the method writes a 0.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeDouble(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating-point number to the byte stream.
            </summary>
            <param name="pDouble">A double-precision (64-bit) floating-point number.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeFloat(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating-point number to the byte stream.
            </summary>
            <param name="pFloat">A single-precision (32-bit) floating-point number.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeInt(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the byte stream.
            </summary>
            <param name="pInt">An integer to write to the byte stream.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeMultiByte(System.String,System.String)">
            <summary>
            Writes a multibyte string to the byte stream using the specified character set.
            </summary>
            <param name="pString">The string value to be written.</param>
            <param name="pCharset">The string denoting the character set to use. Possible character set strings include "shift-jis" , "cn-gb" , "iso-8859-1" , and others.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeObject(System.Object)">
            <summary>
            Writes an object into the byte array in AMF serialized format.
            </summary>
            <param name="pObject">The object to serialize</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeShort(System.Int16)">
            <summary>
            Writes a 16-bit integer to the byte stream. The low 16 bits of the parameter are used. The high 16 bits are ignored.
            </summary>
            <param name="pShort">32-bit integer, whose low 16 bits are written to the byte stream.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeUnsignedInt(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer to the byte stream.
            </summary>
            <param name="pUint">An unsigned integer to write to the byte stream.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the byte stream. The length of the UTF-8 string in bytes is written first, as a 16-bit integer, followed by the bytes representing the characters of the string.
            </summary>
            <param name="pString">The string value to be written.</param>
            <exception cref="T:flash.Global.RangeError">If the length is larger than 65535.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.writeUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string to the byte stream. Similar to the <see cref="M:flash.utils.ByteArray.writeUTF(System.String)"/>() method, but writeUTFBytes() does not prefix the string with a 16-bit length word. 
            </summary>
            <param name="pString">The string value to be written.</param>
        </member>
        <member name="M:flash.utils.ByteArray.flash#utils#IDataInput#readUnsignedByte">
            <summary>
            Reads an unsigned byte from the byte stream. The returned value is in the range 0 to 255.
            </summary>
            <returns>A 32-bit unsigned integer between 0 and 255.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.flash#utils#IDataInput#readUnsignedShort">
            <summary>
            Reads an unsigned 16-bit integer from the byte stream. The returned value is in the range 0 to 65535.
            </summary>
            <returns>A 16-bit unsigned integer between 0 and 65535.</returns>
            <exception cref="T:flash.Global.EOFError">There is not sufficient data available to read.</exception>
        </member>
        <member name="M:flash.utils.ByteArray.writeByte(System.Byte)">
            <summary>
            Writes a byte to the byte stream. The low 8 bits of the parameter are used. The high 24 bits are ignored.
            </summary>
            <param name="pByte">A 32-bit integer. The low 8 bits are written to the byte stream.</param>
        </member>
        <member name="M:flash.utils.ByteArray.writeBytes(flash.utils.ByteArray,System.UInt32,System.UInt32)">
            <summary>
            <para>Writes a sequence of length bytes from the specified byte array, bytes , starting offset (zero-based index) bytes into the byte stream.</para>
            <para>If the length parameter is omitted, the default length of 0 is used; the method writes the entire buffer starting at offset . If the offset parameter is also omitted, the entire buffer is written. </para>
            <para>If offset or length is out of range, they are clamped to the beginning and end of the bytes array. </para>
            </summary>
            <param name="pByteArray">The <see cref="T:flash.utils.ByteArray"/> object.</param>
            <param name="pOffset">A zero-based index indicating the position into the array to begin writing.</param>
            <param name="pLength">An unsigned integer indicating how far into the buffer to write.</param>
        </member>
        <member name="P:flash.utils.ByteArray.flash#utils#IDataInput#bytesAvailable">
            <summary>
            The number of bytes of data available for reading from the current position in the byte array to the end of the array.
            </summary>
        </member>
        <member name="P:flash.utils.ByteArray.flash#utils#IDataInput#endian">
            <summary>
            Changes or reads the byte order for the data; either <see cref="T:flash.utils.Endian"/>.BIG_ENDIAN or <see cref="T:flash.utils.Endian"/>.LITTLE_ENDIAN.
            </summary>
        </member>
        <member name="P:flash.utils.ByteArray.flash#utils#IDataInput#objectEncoding">
            <summary>
            Used to determine whether the ActionScript 3.0, ActionScript 2.0, or ActionScript 1.0 format should be used when writing to, or reading from, a <see cref="T:flash.utils.ByteArray"/> instance.
            </summary>
        </member>
        <member name="P:flash.utils.ByteArray.flash#utils#IDataOutput#endian">
            <summary>
            Changes or reads the byte order for the data; either <see cref="T:flash.utils.Endian"/>.BIG_ENDIAN or <see cref="T:flash.utils.Endian"/>.LITTLE_ENDIAN.
            </summary>
        </member>
        <member name="P:flash.utils.ByteArray.flash#utils#IDataOutput#objectEncoding">
            <summary>
            Used to determine whether the ActionScript 3.0, ActionScript 2.0, or ActionScript 1.0 format should be used when writing to, or reading from, a <see cref="T:flash.utils.ByteArray"/> instance.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.ascent">
            <summary>
            The ascent value of the text is the length from the baseline to the top of the line height in pixels.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.descent">
            <summary>
            The descent value of the text is the length from the baseline to the bottom depth of the line in pixels.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.height">
            <summary>
            The height value of the text of the selected lines (not necessarily the complete text) in pixels.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.leading">
            <summary>
            The leading value is the measurement of the vertical distance between the lines of text.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.width">
            <summary>
            The width value is the width of the text of the selected lines (not necessarily the complete text) in pixels.
            </summary>
        </member>
        <member name="F:flash.text.TextLineMetrics.x">
            <summary>
            The x value is the left position of the first character in pixels.
            </summary>
        </member>
        <member name="M:flash.net.URLRequest.#ctor(System.String)">
            <summary>
            Creates a URLRequest object.
            </summary>
        </member>
        <member name="M:flash.net.URLRequest.#ctor">
            <summary>
            Creates a URLRequest object.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.contentType">
            <summary>
            The MIME content type of the content in the the data property.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.data">
            <summary>
            An object containing data to be transmitted with the URL request.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.digest">
            <summary>
            A string that uniquely identifies the signed Adobe platform component to be stored to (or retrieved from) the Flash Player cache.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.method">
            <summary>
            Controls the HTTP form submission method.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.requestHeaders">
            <summary>
            The array of HTTP request headers to be appended to the HTTP request.
            </summary>
        </member>
        <member name="P:flash.net.URLRequest.url">
            <summary>
            The URL to be requested.
            </summary>
        </member>
        <member name="M:flash.Global.RangeError.#ctor(System.String)">
            <summary>
            A RangeError exception is thrown when a numeric value is outside the acceptable range. When working with arrays, referring to an index position of an array item that does not exist will throw a RangeError exception. Using Number.toExponential() , Number.toPrecision() , and Number.toFixed() methods will throw a RangeError exception in cases where the arguments are outside the acceptable range of numbers. You can extend Number.toExponential() , Number.toPrecision() , and Number.toFixed() to avoid throwing a RangeError.
            </summary>
            <param name="pMessage">Contains the message associated with the RangeError object</param>
        </member>
        <member name="F:flash.display.StageQuality.LOW">
            <summary>
            Specifies low rendering quality: graphics are not anti-aliased, and bitmaps are not smoothed.
            </summary>
        </member>
        <member name="F:flash.display.StageQuality.MEDIUM">
            <summary>
            Specifies medium rendering quality: graphics are anti-aliased using a 2 x 2 pixel grid, but bitmaps are not smoothed.
            </summary>
        </member>
        <member name="F:flash.display.StageQuality.HIGH">
            <summary>
            Specifies high rendering quality: graphics are anti-aliased using a 4 x 4 pixel grid, and bitmaps are smoothed if the movie is static.
            </summary>
        </member>
        <member name="F:flash.display.StageQuality.BEST">
            <summary>
            Specifies very high rendering quality: graphics are anti-aliased using a 4 x 4 pixel grid and bitmaps are always smoothed.
            </summary>
        </member>
        <member name="F:flash.display.Stage.cacheAsBitmap">
            <summary>
            [write-only]
            </summary>
        </member>
        <member name="F:flash.display.Stage.fullScreenHeight">
            <summary>
            [read-only] Returns the height of the monitor that will be used when going to full screen size, if that state is entered immediately.
            </summary>
        </member>
        <member name="F:flash.display.Stage.fullScreenWidth">
            <summary>
            [read-only] Returns the width of the monitor that will be used when going to full screen size, if that state is entered immediately.
            </summary>
        </member>
        <member name="M:flash.display.Stage.invalidate">
            <summary>
            Calling the invalidate() method signals Flash Player to alert display objects on the next opportunity it has to render the display list (for example, when the playhead advances to a new frame).
            </summary>
        </member>
        <member name="M:flash.display.Stage.isFocusInaccessible">
            <summary>
            Determines whether the Stage.focus property returns null for security reasons.
            </summary>
        </member>
        <member name="P:flash.display.Stage.align">
            <summary>
            A value from the <see cref="T:flash.display.StageAlign"/> class that specifies the alignment of the stage in Flash Player or the browser.
            </summary>
        </member>
        <member name="P:flash.display.Stage.displayState">
            <summary>
            A value from the <see cref="T:flash.display.StageDisplayState"/> class that specifies which display state to use.
            </summary>
        </member>
        <member name="P:flash.display.Stage.focus">
            <summary>
            The interactive object with keyboard focus; or null if focus is not set or if the focused object belongs to a security sandbox to which the calling object does not have access.
            </summary>
        </member>
        <member name="P:flash.display.Stage.frameRate">
            <summary>
            Gets and sets the frame rate of the stage.
            </summary>
        </member>
        <member name="P:flash.display.Stage.fullScreenSourceRect">
            <summary>
            Sets Flash Player to scale a specific region of the stage to full-screen mode.
            </summary>
        </member>
        <member name="P:flash.display.Stage.height">
            <summary>
            Indicates the height of the display object, in pixels.
            </summary>
        </member>
        <member name="P:flash.display.Stage.quality">
            <summary>
            A value from the <see cref="T:flash.display.StageQuality"/> class that specifies which rendering quality is used.
            </summary>
        </member>
        <member name="P:flash.display.Stage.scaleMode">
            <summary>
            A value from the <see cref="T:flash.display.StageScaleMode"/> class that specifies which scale mode to use.
            </summary>
        </member>
        <member name="P:flash.display.Stage.showDefaultContextMenu">
            <summary>
            Specifies whether to show or hide the default items in the Flash Player context menu.
            </summary>
        </member>
        <member name="P:flash.display.Stage.stageFocusRect">
            <summary>
            Specifies whether or not objects display a glowing border when they have focus.
            </summary>
        </member>
        <member name="P:flash.display.Stage.stageHeight">
            <summary>
            The current height, in pixels, of the Stage.
            </summary>
        </member>
        <member name="P:flash.display.Stage.stageWidth">
            <summary>
            Specifies the current width, in pixels, of the Stage.
            </summary>
        </member>
        <member name="P:flash.display.Stage.width">
            <summary>
            Indicates the width of the display object, in pixels.
            </summary>
        </member>
        <member name="E:flash.display.Stage.fullScreen">
            <summary>
            Dispatched when the Stage object enters, or leaves, full-screen mode.
            </summary>
        </member>
        <member name="E:flash.display.Stage.mouseLeave">
            <summary>
            Dispatched by the Stage object when the mouse pointer moves out of the stage area.
            </summary>
        </member>
        <member name="E:flash.display.Stage.resize">
            <summary>
            Dispatched when the <see cref="P:flash.display.Stage.scaleMode"/> property of the Stage object is set to <see cref="T:flash.display.StageScaleMode"/>.NO_SCALE and the SWF file is resized.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Always">
            <summary>
            	The property or method is always browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Never">
            <summary>
            	The property or method is never browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
            <summary>
            	The property or method is a feature that only advanced users should see. An editor can either show or hide such properties.
            </summary>
        </member>
        <member name="F:flash.accessibility.Accessibility.active">
            <summary>
            Indicates whether a screen reader is currently active and the player is communicating with it.
            </summary>
        </member>
        <member name="M:flash.accessibility.Accessibility.updateProperties">
            <summary>
            Tells Flash Player to apply any accessibility changes made by using the <see cref="T:flash.display.DisplayObject"/>.accessibilityProperties property.
            </summary>
        </member>
        <member name="M:flash.utils.Timer.reset">
            <summary>
            Stops the timer, if it is running, and sets the <see cref="P:flash.utils.Timer.currentCount"/> property back to 0, like the reset button of a stopwatch.
            </summary>
        </member>
        <member name="M:flash.utils.Timer.start">
            <summary>
            Starts the timer, if it is not already running.
            </summary>
        </member>
        <member name="M:flash.utils.Timer.stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:flash.utils.Timer.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs a new Timer object with the specified delay and <paramref name="repeatCount"/> states.
            </summary>
        </member>
        <member name="M:flash.utils.Timer.#ctor(System.Double)">
            <summary>
            Constructs a new Timer object with the specified delay and <see cref="P:flash.utils.Timer.repeatCount"/> states.
            </summary>
        </member>
        <member name="E:flash.utils.Timer.timer">
            <summary>
            Dispatched whenever a Timer object reaches an interval specified according to the delay property.
            </summary>
        </member>
        <member name="E:flash.utils.Timer.timerComplete">
            <summary>
            Dispatched whenever it has completed the number of requests set by <see cref="P:flash.utils.Timer.repeatCount"/>.
            </summary>
        </member>
        <member name="P:flash.utils.Timer.currentCount">
            <summary>
            [read-only] The total number of times the timer has fired since it started at zero.
            </summary>
        </member>
        <member name="P:flash.utils.Timer.delay">
            <summary>
            The delay, in milliseconds, between timer events.
            </summary>
        </member>
        <member name="P:flash.utils.Timer.repeatCount">
            <summary>
            The total number of times the timer is set to run.
            </summary>
        </member>
        <member name="P:flash.utils.Timer.running">
            <summary>
            [read-only] The timer's current state; true if the timer is running, otherwise false.
            </summary>
        </member>
        <member name="F:flash.text.GridFitType.NONE">
            <summary>
            Specifies no grid fitting. Horizontal and vertical lines in the glyphs are not
            forced to the pixel grid. This setting is recommended for animation or for
            large font sizes.
            </summary>
        </member>
        <member name="F:flash.text.GridFitType.PIXEL">
            <summary>
            Specifies that strong horizontal and vertical lines are fit to the pixel grid.
            This setting works only for left-aligned text fields. To use this setting, the
            AntiAliasType property of the text field must be set to AntiAliasType.ADVANCED
            . This setting generally provides the best legibility for left-aligned text. 
            </summary>
        </member>
        <member name="F:flash.text.GridFitType.SUBPIXEL">
            <summary>
            Specifies that strong horizontal and vertical lines are fit to the subpixel
            grid on an LCD monitor. To use this setting, the AntiAliasType property of the
            text field must be set to AntiAliasType.ADVANCED . The GridFitType.SUBPIXEL
            setting is often good for right-aligned or centered dynamic text, and it is
            sometimes a useful trade-off for animation versus text quality. 
            </summary>
        </member>
        <member name="M:flash.text.Font.enumerateFonts(System.Boolean)">
            <summary>
            [static] Specifies whether to provide a list of the currently available embedded fonts.
            </summary>
        </member>
        <member name="M:flash.text.Font.enumerateFonts">
            <summary>
            [static] Specifies whether to provide a list of the currently available embedded fonts.
            </summary>
        </member>
        <member name="M:flash.text.Font.hasGlyphs(System.String)">
            <summary>
            Specifies whether a provided string can be displayed using the currently assigned font.
            </summary>
        </member>
        <member name="M:flash.text.Font.registerFont(flash.Global.Class)">
            <summary>
            [static] Registers a font class in the global font list.
            </summary>
        </member>
        <member name="P:flash.text.Font.fontName">
            <summary>
            [read-only] The name of an embedded font.
            </summary>
        </member>
        <member name="P:flash.text.Font.fontStyle">
            <summary>
            [read-only] The style of the font.
            </summary>
        </member>
        <member name="P:flash.text.Font.fontType">
            <summary>
            [read-only] The type of the font.
            </summary>
        </member>
        <member name="P:flash.system.System.ime">
            <summary>
            [static][read-only] The currently installed system IME.
            </summary>
        </member>
        <member name="P:flash.system.System.totalMemory">
            <summary>
            [static][read-only] The amount of memory (in bytes) currently in use by Adobe® Flash® Player.
            </summary>
        </member>
        <member name="P:flash.system.System.useCodePage">
            <summary>
            [static] A Boolean value that tells Flash Player which code page to use to interpret external text files.
            </summary>
        </member>
        <member name="F:flash.net.NetStream.CONNECT_TO_FMS">
            <summary>
            A static object used as a parameter to the constructor for a NetStream instance.
            </summary>
        </member>
        <member name="F:flash.net.NetStream.DIRECT_CONNECTIONS">
            <summary>
            Creates a peer-to-peer publisher connection.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.attachAudio(flash.media.Microphone)">
            <summary>
            Specifies an audio stream sent over the NetStream object, from a Microphone object passed as the source.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.attachCamera(flash.media.Camera,System.Int32)">
            <summary>
            Starts capturing video from a camera, or stops capturing if theCamera is set to null.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.attachCamera(flash.media.Camera)">
            <summary>
            Starts capturing video from a camera, or stops capturing if theCamera is set to null.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.close">
            <summary>
            Stops playing all data on the stream, sets the time property to 0, and makes the stream available for another use.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.pause">
            <summary>
            Pauses playback of a video stream.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.play(System.Object,System.Single,System.Single,System.Object)">
            <summary>
            Begins playback of video files.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.play">
            <summary>
            Begins playback of video files.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.publish(System.String,System.String)">
            <summary>
            Sends streaming audio, video, and text messages from a client to Flash Media Server, optionally recording the stream during transmission.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.publish(System.String)">
            <summary>
            Sends streaming audio, video, and text messages from a client to Flash Media Server, optionally recording the stream during transmission.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.publish">
            <summary>
            Sends streaming audio, video, and text messages from a client to Flash Media Server, optionally recording the stream during transmission.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.receiveAudio(System.Boolean)">
            <summary>
            Specifies whether incoming audio plays on the stream.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.receiveVideo(System.Boolean)">
            <summary>
            Specifies whether incoming video will play on the stream.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.receiveVideoFPS(System.Double)">
            <summary>
            Specifies the frame rate for incoming video.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.resume">
            <summary>
            Resumes playback of a video stream that is paused.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.seek(System.Double)">
            <summary>
            Seeks the keyframe (also called an I-frame in the video industry) closest to the specified location.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.send(System.String,System.Object[])">
            <summary>
            Sends a message on a published stream to all subscribing clients.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.send(System.String)">
            <summary>
            Sends a message on a published stream to all subscribing clients.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.togglePause">
            <summary>
            Pauses or resumes playback of a stream.
            </summary>
        </member>
        <member name="M:flash.net.NetStream.#ctor(flash.net.NetConnection)">
            <summary>
            Creates a stream that can be used for playing video files through the specified NetConnection object.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.bufferLength">
            <summary>
            [read-only] The number of seconds of data currently in the buffer.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.bufferTime">
            <summary>
            Specifies how long to buffer messages before starting to display the stream.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.bytesLoaded">
            <summary>
            [read-only] The number of bytes of data that have been loaded into the application.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.bytesTotal">
            <summary>
            [read-only] The total size in bytes of the file being loaded into the application.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.checkPolicyFile">
            <summary>
            Specifies whether the application should try to download a cross-domain policy file from the loaded video file's server before beginning to load the video file.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.client">
            <summary>
            Specifies the object on which callback methods are invoked to handle streaming or FLV file data.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.currentFPS">
            <summary>
            [read-only] The number of frames per second being displayed.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.farID">
            <summary>
            [read-only] The identifier of the far end that is connected to this NetStream instance.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.farNonce">
            <summary>
            [read-only] A value chosen substantially by the other end of this stream, unique to this connection.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.info">
            <summary>
            [read-only] Returns a NetStreamInfo object whose properties contain statistics about the quality of service.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.liveDelay">
            <summary>
            [read-only] The number of seconds of data in the subscribing stream's buffer in live (unbuffered) mode.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.maxPauseBufferTime">
            <summary>
            Specifies how long to buffer messages during pause mode, in seconds.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.nearNonce">
            <summary>
            [read-only] A value chosen substantially by this end of the stream, unique to this connection.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.objectEncoding">
            <summary>
            [read-only] The object encoding (AMF version) for this NetStream object.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.peerStreams">
            <summary>
            [read-only] An object that holds all of the subscribing NetStream instances that are listening to this publishing NetStream instance.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.soundTransform">
            <summary>
            Controls sound in this NetStream object.
            </summary>
        </member>
        <member name="P:flash.net.NetStream.time">
            <summary>
            [read-only] The position of the playhead, in seconds.
            </summary>
        </member>
        <member name="E:flash.net.NetStream.asyncError">
            <summary>
            Dispatched when an exception is thrown asynchronously — that is, from native asynchronous code.
            </summary>
        </member>
        <member name="E:flash.net.NetStream.ioError">
            <summary>
            Dispatched when an input or output error occurs that causes a network operation to fail.
            </summary>
        </member>
        <member name="E:flash.net.NetStream.netStatus">
            <summary>
            Dispatched when a NetStream object is reporting its status or error condition.
            </summary>
        </member>
        <member name="T:flash.Global.ArraySortOptions">
            <summary>
            </summary>
        </member>
        <member name="F:flash.Global.ArraySortOptions.CASEINSENSITIVE">
            <summary>
            [static] Specifies case-insensitive sorting for the Array class sorting methods.
            </summary>
        </member>
        <member name="F:flash.Global.ArraySortOptions.DESCENDING">
            <summary>
            [static] Specifies descending sorting for the Array class sorting methods.
            </summary>
        </member>
        <member name="F:flash.Global.ArraySortOptions.NUMERIC">
            <summary>
            [static] Specifies numeric (instead of character-string) sorting for the Array class sorting methods.
            </summary>
        </member>
        <member name="F:flash.Global.ArraySortOptions.RETURNINDEXEDARRAY">
            <summary>
            [static] Specifies that a sort returns an array that consists of array indices.
            </summary>
        </member>
        <member name="F:flash.Global.ArraySortOptions.UNIQUESORT">
            <summary>
            [static] Specifies the unique sorting requirement for the Array class sorting methods.
            </summary>
        </member>
        <member name="M:flash.Global.Array.concat(System.Object[])">
            <summary>
            Concatenates the elements specified in the parameters with the elements in an array and creates a new array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.concat">
            <summary>
            Concatenates the elements specified in the parameters with the elements in an array and creates a new array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.every(flash.Global.Array.ArrayFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the array until an item is reached that returns false for the specified function.
            </summary>
        </member>
        <member name="M:flash.Global.Array.every(flash.Global.Array.ArrayFilterCallback)">
            <summary>
            Executes a test function on each item in the array until an item is reached that returns false for the specified function.
            </summary>
        </member>
        <member name="M:flash.Global.Array.filter(flash.Global.Array.ArrayFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the array and constructs a new array for all items that return true for the specified function.
            </summary>
        </member>
        <member name="M:flash.Global.Array.filter(flash.Global.Array.ArrayFilterCallback)">
            <summary>
            Executes a test function on each item in the array and constructs a new array for all items that return true for the specified function.
            </summary>
        </member>
        <member name="M:flash.Global.Array.forEach(flash.Global.Array.ArrayForeachCallback,System.Object)">
            <summary>
            Executes a function on each item in the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.forEach(flash.Global.Array.ArrayForeachCallback)">
            <summary>
            Executes a function on each item in the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.indexOf(System.Object,System.Int32)">
            <summary>
            Searches for an item in an array by using strict equality (===) and returns the index position of the item.
            </summary>
        </member>
        <member name="M:flash.Global.Array.indexOf(System.Object)">
            <summary>
            Searches for an item in an array by using strict equality (===) and returns the index position of the item.
            </summary>
        </member>
        <member name="M:flash.Global.Array.join(System.Object)">
            <summary>
            Converts the elements in an array to strings, inserts the specified separator between the elements, concatenates them, and returns the resulting string.
            </summary>
        </member>
        <member name="M:flash.Global.Array.lastIndexOf(System.Object,System.Int32)">
            <summary>
            Searches for an item in an array, working backward from the last item, and returns the index position of the matching item using strict equality (===).
            </summary>
        </member>
        <member name="M:flash.Global.Array.lastIndexOf(System.Object)">
            <summary>
            Searches for an item in an array, working backward from the last item, and returns the index position of the matching item using strict equality (===).
            </summary>
        </member>
        <member name="M:flash.Global.Array.map(flash.Global.Array.ArrayForeachCallback,System.Object)">
            <summary>
            Executes a function on each item in an array, and constructs a new array of items corresponding to the results of the function on each item in the original array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.map(flash.Global.Array.ArrayForeachCallback)">
            <summary>
            Executes a function on each item in an array, and constructs a new array of items corresponding to the results of the function on each item in the original array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.pop">
            <summary>
            Removes the last element from an array and returns the value of that element.
            </summary>
        </member>
        <member name="M:flash.Global.Array.push(System.Object[])">
            <summary>
            Adds one or more elements to the end of an array and returns the new length of the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.push">
            <summary>
            Adds one or more elements to the end of an array and returns the new length of the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.reverse">
            <summary>
            Reverses the array in place.
            </summary>
        </member>
        <member name="M:flash.Global.Array.shift">
            <summary>
            Removes the first element from an array and returns that element.
            </summary>
        </member>
        <member name="M:flash.Global.Array.slice(System.Int32,System.Int32)">
            <summary>
            Returns a new array that consists of a range of elements from the original array, without modifying the original array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.slice(System.Int32)">
            <summary>
            Returns a new array that consists of a range of elements from the original array, without modifying the original array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.slice">
            <summary>
            Returns a new array that consists of a range of elements from the original array, without modifying the original array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.some(flash.Global.Array.ArrayFilterCallback,System.Object)">
            <summary>
            Executes a test function on each item in the array until an item is reached that returns true.
            </summary>
        </member>
        <member name="M:flash.Global.Array.some(flash.Global.Array.ArrayFilterCallback)">
            <summary>
            Executes a test function on each item in the array until an item is reached that returns true.
            </summary>
        </member>
        <member name="M:flash.Global.Array.sort(flash.Global.Array.ArraySortCallback)">
            <summary>
            Sorts the elements in an array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.sort">
            <summary>
            Sorts the elements in an array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.sortOn(System.Object,System.Object)">
            <summary>
            Sorts the elements in an array according to one or more fields in the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.sortOn(System.Object)">
            <summary>
            Sorts the elements in an array according to one or more fields in the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.splice(System.Int32,System.UInt32,System.Object[])">
            <summary>
            Adds elements to and removes elements from an array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.splice(System.Int32,System.UInt32)">
            <summary>
            Adds elements to and removes elements from an array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.toLocaleString">
            <summary>
            Returns a string that represents the elements in the specified array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.unshift(System.Object[])">
            <summary>
            Adds one or more elements to the beginning of an array and returns the new length of the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.unshift">
            <summary>
            Adds one or more elements to the beginning of an array and returns the new length of the array.
            </summary>
        </member>
        <member name="M:flash.Global.Array.#ctor(System.Int32)">
            <summary>
            Lets you create an array of the specified number of elements.
            </summary>
        </member>
        <member name="M:flash.Global.Array.#ctor">
            <summary>
            Lets you create an array of the specified number of elements.
            </summary>
        </member>
        <member name="M:flash.Global.Array.#ctor(System.Object[])">
            <summary>
            Lets you create an array that contains the specified elements.
            </summary>
        </member>
        <member name="P:flash.Global.Array.length">
            <summary>
            A non-negative integer specifying the number of elements in the array.
            </summary>
        </member>
        <member name="F:flash.events.SyncEvent.SYNC">
            <summary>
            Defines the value of the type property of a sync event object.
            </summary>
        </member>
        <member name="F:flash.events.SecurityErrorEvent.SECURITY_ERROR">
            <summary>
            The <see cref="T:flash.events.SecurityErrorEvent"/>.SECURITY_ERROR constant defines the value of the type property of a securityError event object.
            </summary>
        </member>
        <member name="M:flash.events.SecurityErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Creates an Event object that contains information about security error events.
            </summary>
        </member>
        <member name="M:flash.events.SecurityErrorEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an Event object that contains information about security error events.
            </summary>
        </member>
        <member name="M:flash.events.SecurityErrorEvent.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an Event object that contains information about security error events.
            </summary>
        </member>
        <member name="M:flash.events.SecurityErrorEvent.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an Event object that contains information about security error events.
            </summary>
        </member>
        <member name="M:flash.events.SecurityErrorEvent.#ctor(System.String)">
            <summary>
            Creates an Event object that contains information about security error events.
            </summary>
        </member>
        <member name="F:flash.display.Shape.graphics">
            <summary>
            [read-only] Specifies the Graphics object belonging to this Shape object, where vector drawing commands can occur.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginBitmapFill(flash.display.BitmapData,flash.geom.Matrix,System.Boolean,System.Boolean)">
            <summary>
            Fills a drawing area with a bitmap image.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginBitmapFill(flash.display.BitmapData,flash.geom.Matrix,System.Boolean)">
            <summary>
            Fills a drawing area with a bitmap image.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginBitmapFill(flash.display.BitmapData,flash.geom.Matrix)">
            <summary>
            Fills a drawing area with a bitmap image.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginBitmapFill(flash.display.BitmapData)">
            <summary>
            Fills a drawing area with a bitmap image.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginGradientFill(System.String,System.UInt32[],System.Single[],System.Int32[],flash.geom.Matrix,flash.display.SpreadMethod,flash.display.InterpolationMethod,System.Single)">
            <summary>
            Specifies a gradient fill used by subsequent calls to other Graphics methods (such as <see cref="M:flash.display.Graphics.lineTo(System.Single,System.Single)"/>() or <see cref="M:flash.display.Graphics.drawCircle(System.Single,System.Single,System.Single)"/>()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginGradientFill(System.String,System.UInt32[],System.Single[],System.Int32[],flash.geom.Matrix,flash.display.SpreadMethod,flash.display.InterpolationMethod)">
            <summary>
            Specifies a gradient fill used by subsequent calls to other Graphics methods (such as <see cref="M:flash.display.Graphics.lineTo(System.Single,System.Single)"/>() or <see cref="M:flash.display.Graphics.drawCircle(System.Single,System.Single,System.Single)"/>()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginGradientFill(System.String,System.UInt32[],System.Single[],System.Int32[],flash.geom.Matrix,flash.display.SpreadMethod)">
            <summary>
            Specifies a gradient fill used by subsequent calls to other Graphics methods (such as lineTo() or drawCircle()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginGradientFill(System.String,System.UInt32[],System.Single[],System.Int32[],flash.geom.Matrix)">
            <summary>
            Specifies a gradient fill used by subsequent calls to other Graphics methods (such as lineTo() or drawCircle()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginGradientFill(System.String,System.UInt32[],System.Single[],System.Int32[])">
            <summary>
            Specifies a gradient fill used by subsequent calls to other Graphics methods (such as lineTo() or drawCircle()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.clear">
            <summary>
            Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.beginFill(System.UInt32,System.Single)">
            <summary>
            Specifies a simple one-color fill that Flash Player uses for subsequent calls to other Graphics methods (such as lineTo() or drawCircle()) for the object.
            </summary>
            <param name="color"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:flash.display.Graphics.drawCircle(System.Single,System.Single,System.Single)">
            <summary>
            Draws a circle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
        </member>
        <member name="M:flash.display.Graphics.drawRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:flash.display.Graphics.endFill">
            <summary>
            Applies a fill to the lines and curves that were added since the last call to the beginFill(), beginGradientFill(), or beginBitmapFill() method.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.lineStyle(System.Single,System.UInt32,System.Single)">
            <summary>
            Specifies a line style that Flash uses for subsequent calls to other Graphics methods (such as lineTo() or drawCircle()) for the object.
            </summary>
        </member>
        <member name="M:flash.display.Graphics.lineTo(System.Single,System.Single)">
            <summary>
            Draws a line using the current line style from the current drawing position to (x, y); the current drawing position is then set to (x, y).
            </summary>
        </member>
        <member name="M:flash.display.Graphics.moveTo(System.Single,System.Single)">
            <summary>
            Moves the current drawing position to (x, y).
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.alpha">
            <summary>
            The alpha transparency value for the shadow color.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.angle">
            <summary>
            The angle of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.color">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.distance">
            <summary>
            The offset distance of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.hideObject">
            <summary>
            Indicates whether or not the object is hidden.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.inner">
            <summary>
            Indicates whether or not the shadow is an inner shadow.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.knockout">
            <summary>
            Applies a knockout effect (true), which effectively makes the object's fill transparent and reveals the background color of the document.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.DropShadowFilter.strength">
            <summary>
            The strength of the imprint or spread.
            </summary>
        </member>
        <member name="F:flash.filters.BlurFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.BlurFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.BlurFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.external.ExternalInterface.available">
            <summary>
            Indicates whether this player is in a container that offers an external interface.
            </summary>
        </member>
        <member name="F:flash.external.ExternalInterface.objectID">
            <summary>
            Returns the id attribute of the object tag in Internet Explorer, or the name attribute of the embed tag in Netscape.
            </summary>
        </member>
        <member name="M:flash.external.ExternalInterface.addCallback(System.String,flash.external.ExternalInterface.ExternalInterfaceCallback)">
            <summary>
            Registers an ActionScript method as callable from the container.
            </summary>
            <param name="functionName"></param>
            <param name="closure"></param>
        </member>
        <member name="M:flash.external.ExternalInterface.call(System.String,System.Object[])">
            <summary>
            Calls a function exposed by the Flash Player container, passing zero or more arguments.
            </summary>
            <param name="functionName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:flash.external.ExternalInterface.call(System.String)">
            <summary>
            Calls a function exposed by the Flash Player container, passing zero or more arguments.
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="P:flash.external.ExternalInterface.marshallExceptions">
            <summary>
            Indicates whether the external interface should attempt to pass ActionScript exceptions to the current browser and JavaScript exceptions to Flash Player.
            </summary>
        </member>
        <member name="F:flash.events.IMEEvent.IME_COMPOSITION">
            <summary>
            The <see cref="T:flash.events.ActivityEvent"/>.ACTIVITY constant defines the value of the type property of an activity event object.
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenu.display(flash.display.Stage,System.Double,System.Double)">
            <summary>
            Pops up this menu at the specified location.
            </summary>
        </member>
        <member name="M:flash.ui.ContextMenu.hideBuiltInItems">
            <summary>
            Hides all built-in menu items (except Settings) in the specified <see cref="T:flash.ui.ContextMenu"/> object.
            </summary>
        </member>
        <member name="P:flash.ui.ContextMenu.builtInItems">
            <summary>
            An object that has the following properties of the <see cref="T:flash.ui.ContextMenuBuiltInItems"/> class: forwardAndBack, loop, play, print, quality, rewind, save, and zoom.
            </summary>
        </member>
        <member name="P:flash.ui.ContextMenu.customItems">
            <summary>
            An array of <see cref="T:flash.ui.ContextMenuItem"/> objects.
            </summary>
        </member>
        <member name="E:flash.ui.ContextMenu.menuSelect">
            <summary>
            Dispatched when a user first generates a context menu but before the contents of the context menu are displayed.
            </summary>
        </member>
        <member name="F:flash.text.TextFormatAlign.CENTER">
            <summary>
            [static] Constant; centers the text in the text field.
            </summary>
        </member>
        <member name="F:flash.text.TextFormatAlign.JUSTIFY">
            <summary>
            [static] Constant; justifies text within the text field.
            </summary>
        </member>
        <member name="F:flash.text.TextFormatAlign.LEFT">
            <summary>
            [static] Constant; aligns text to the left within the text field.
            </summary>
        </member>
        <member name="F:flash.text.TextFormatAlign.RIGHT">
            <summary>
            [static] Constant; aligns text to the right within the text field.
            </summary>
        </member>
        <member name="M:flash.Global.TypeError.#ctor(System.String)">
            <summary>
            A TypeError exception is thrown when the actual type of an operand is different from the expected type
            </summary>
            <param name="pMessage">Contains the message associated with the TypeError object</param>
        </member>
        <member name="M:flash.Global.IllegalOperationError.#ctor(System.String)">
            <summary>
            The IllegalOperationError exception is thrown when a method is not implemented or the implementation doesn't cover the current usage. 
            </summary>
            <param name="pMessage">A string associated with the error object. </param>
        </member>
        <member name="F:flash.events.TimerEvent.TIMER">
            <summary>
            Defines the value of the type property of a timer event object.
            </summary>
        </member>
        <member name="F:flash.events.TimerEvent.TIMER_COMPLETE">
            <summary>
            Defines the value of the type property of a timerComplete event object.
            </summary>
        </member>
        <member name="F:flash.net.URLLoaderDataFormat.BINARY">
            <summary>
            Specifies that downloaded data is received as raw binary data.
            </summary>
        </member>
        <member name="F:flash.net.URLLoaderDataFormat.TEXT">
            <summary>
            Specifies that downloaded data is received as text.
            </summary>
        </member>
        <member name="F:flash.net.URLLoaderDataFormat.VARIABLES">
            <summary>
            Specifies that downloaded data is received as URL-encoded variables.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.dotall">
            <summary>
            Specifies whether the dot character (.) in a regular expression pattern matches new-line characters.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.extended">
            <summary>
            Specifies whether to use extended mode for the regular expression.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.global">
            <summary>
            Specifies whether to use global matching for the regular expression.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.ignoreCase">
            <summary>
            Specifies whether the regular expression ignores case sensitivity.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.multiline">
            <summary>
            Specifies whether the m (multiline) flag is set.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.lastIndex">
            <summary>
            Specifies the index position in the string at which to start the next search.
            </summary>
        </member>
        <member name="F:flash.Global.RegExp.source">
            <summary>
            Specifies the pattern portion of the regular expression.
            </summary>
        </member>
        <member name="M:flash.Global.RegExp.#ctor(System.String,System.String)">
            <summary>
            Lets you construct a regular expression from two strings.
            </summary>
            <param name="re">The pattern of the regular expression (also known as the constructor string ). This is the main part of the regular expression (the part that goes within the "/" characters). </param>
            <param name="flags">The modifiers of the regular expression (g, i, s, m, x)</param>
        </member>
        <member name="M:flash.Global.RegExp.exec(System.String)">
            <summary>
            Performs a search for the regular expression on the given string <paramref name="str"/>.
            </summary>
            <param name="str">The string to search.</param>
            <returns>If there is no match, null ; otherwise, a <see cref="T:flash.Global.RegExpMatch"/></returns>
        </member>
        <member name="M:flash.Global.RegExp.test(System.String)">
            <summary>
            Tests for the match of the regular expression in the given string <paramref name="str"/> . 
            </summary>
            <param name="str">The string to test.</param>
            <returns>If there is a match, true ; otherwise, false.</returns>
        </member>
        <member name="F:flash.Global.RegExpMatch.index">
            <summary>
            The character position of the matched substring within the string
            </summary>
        </member>
        <member name="F:flash.Global.RegExpMatch.input">
            <summary>
            The string
            </summary>
        </member>
        <member name="P:flash.Global.RegExpMatch.Item(System.Int32)">
            <summary>
            element 0 contains the complete matching substring, and other elements of the array (1 through n ) contain substrings that match parenthetical groups in the regular expression
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="F:flash.filters.GlowFilter.alpha">
            <summary>
            The alpha transparency value for the shadow color.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.color">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.inner">
            <summary>
            Indicates whether or not the shadow is an inner shadow.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.knockout">
            <summary>
            Applies a knockout effect (true), which effectively makes the object's fill transparent and reveals the background color of the document.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.GlowFilter.strength">
            <summary>
            The strength of the imprint or spread.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.alphas">
            <summary>
            The alpha transparency value for the shadow color.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.angle">
            <summary>
            The angle of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.blurX">
            <summary>
            The amount of horizontal blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.blurY">
            <summary>
            The amount of vertical blur, in pixels.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.colors">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.distance">
            <summary>
            The offset distance of the bevel.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.knockout">
            <summary>
            Applies a knockout effect (true), which effectively makes the object's fill transparent and reveals the background color of the document.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.quality">
            <summary>
            The number of times to apply the filter.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.ratios">
            <summary>
            An array of color distribution ratios for the corresponding colors in the colors array.
            </summary>
        </member>
        <member name="F:flash.filters.GradientGlowFilter.strength">
            <summary>
            The strength of the imprint or spread.
            </summary>
        </member>
        <member name="F:flash.events.ActivityEvent.ACTIVITY">
            <summary>
            The <see cref="T:flash.events.ActivityEvent"/>.ACTIVITY constant defines the value of the type property of an activity event object.
            </summary>
        </member>
        <member name="P:flash.events.ActivityEvent.activating">
            <summary>
            Indicates whether the device is activating (true) or deactivating (false).
            </summary>
        </member>
        <member name="M:flash.ui.Mouse.hide">
            <summary>
            Hides the pointer.
            </summary>
        </member>
        <member name="M:flash.ui.Mouse.show">
            <summary>
            Displays the pointer.
            </summary>
        </member>
        <member name="F:flash.system.SecurityDomain.currentDomain">
            <summary>
            [static][read-only] Gets the current security domain.
            </summary>
        </member>
        <member name="F:flash.net.LocalConnection.domain">
            <summary>
            A string representing the domain of the location of the current file.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.allowDomain(System.String[])">
            <summary>
            Specifies one or more domains that can send <see cref="T:flash.net.LocalConnection"/> calls to this <see cref="T:flash.net.LocalConnection"/> instance.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.allowDomain">
            <summary>
            Specifies one or more domains that can send <see cref="T:flash.net.LocalConnection"/> calls to this <see cref="T:flash.net.LocalConnection"/> instance.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.allowInsecureDomain(System.String[])">
            <summary>
            Specifies one or more domains that can send <see cref="T:flash.net.LocalConnection"/> calls to this <see cref="T:flash.net.LocalConnection"/> object.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.allowInsecureDomain">
            <summary>
            Specifies one or more domains that can send <see cref="T:flash.net.LocalConnection"/> calls to this <see cref="T:flash.net.LocalConnection"/> object.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.close">
            <summary>
            Closes (disconnects) a <see cref="T:flash.net.LocalConnection"/> object.
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.connect(System.String)">
            <summary>
            Prepares a <see cref="T:flash.net.LocalConnection"/> object to receive commands from a send() command (called the sending LocalConnection object).
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.send(System.String,System.String,System.Object)">
            <summary>
            Invokes the method named methodName on a connection opened with the connect(connectionName) method (the receiving LocalConnection object).
            </summary>
        </member>
        <member name="M:flash.net.LocalConnection.send(System.String,System.String)">
            <summary>
            Invokes the method named methodName on a connection opened with the connect(connectionName) method (the receiving LocalConnection object).
            </summary>
        </member>
        <member name="P:flash.net.LocalConnection.client">
            <summary>
            Indicates the object on which callback methods are invoked.
            </summary>
        </member>
        <member name="E:flash.net.LocalConnection.asyncError">
            <summary>
            Dispatched when an exception is thrown asynchronously — that is, from native asynchronous code.
            </summary>
        </member>
        <member name="E:flash.net.LocalConnection.securityError">
            <summary>
            Dispatched if a call to LocalConnection.send() attempts to send data to a different security sandbox.
            </summary>
        </member>
        <member name="E:flash.net.LocalConnection.status">
            <summary>
            Dispatched when a LocalConnection object reports its status.
            </summary>
        </member>
        <member name="M:flash.media.SoundTransform.#ctor(System.Double,System.Double)">
            <summary>
            Creates a SoundTransform object.
            </summary>
        </member>
        <member name="M:flash.media.SoundTransform.#ctor(System.Double)">
            <summary>
            Creates a SoundTransform object.
            </summary>
        </member>
        <member name="M:flash.media.SoundTransform.#ctor">
            <summary>
            Creates a SoundTransform object.
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.leftToLeft">
            <summary>
            A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the left speaker.
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.leftToRight">
            <summary>
            A value, from 0 (none) to 1 (all), specifying how much of the left input is played in the right speaker.
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.pan">
            <summary>
            The left-to-right panning of the sound, ranging from -1 (full pan left) to 1 (full pan right).
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.rightToLeft">
            <summary>
            A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the left speaker.
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.rightToRight">
            <summary>
            A value, from 0 (none) to 1 (all), specifying how much of the right input is played in the right speaker.
            </summary>
        </member>
        <member name="P:flash.media.SoundTransform.volume">
            <summary>
            The volume, ranging from 0 (silent) to 1 (full volume).
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.attribute(System.Object)">
            <summary>
            Calls the attribute() method of each XML object and returns an XMLList object of the results.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.attributes">
            <summary>
            Calls the attributes() method of each XML object and returns an XMLList object of attributes for each XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.child(System.Object)">
            <summary>
            Calls the child() method of each XML object and returns an XMLList object that contains the results in order.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.children">
            <summary>
            Calls the children() method of each XML object and returns an XMLList object that contains the results.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.comments">
            <summary>
            Calls the comments() method of each XML object and returns an XMLList of comments.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.contains(flash.Global.XML)">
            <summary>
            Checks whether the XMLList object contains an XML object that is equal to the given value parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.copy">
            <summary>
            Returns a copy of the given XMLList object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.descendants(System.Object)">
            <summary>
            Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object that have the given name parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.descendants">
            <summary>
            Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object that have the given name parameter.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.elements(System.Object)">
            <summary>
            Calls the elements() method of each XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.elements">
            <summary>
            Calls the elements() method of each XML object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.hasComplexContent">
            <summary>
            Checks whether the XMLList object contains complex content.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.hasOwnProperty(System.String)">
            <summary>
            Checks for the property specified by p.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.hasSimpleContent">
            <summary>
            Checks whether the XMLList object contains simple content.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.length">
            <summary>
            Returns the number of properties in the XMLList object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.normalize">
            <summary>
            Merges adjacent text nodes and eliminates empty text nodes for each of the following: all text nodes in the XMLList, all the XML objects contained in the XMLList, and the descendants of all the XML objects in the XMLList.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.parent">
            <summary>
            Returns the parent of the XMLList object if all items in the XMLList object have the same parent.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.processingInstructions(System.String)">
            <summary>
            If a name parameter is provided, lists all the children of the XMLList object that contain processing instructions with that name.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.processingInstructions">
            <summary>
            If a name parameter is provided, lists all the children of the XMLList object that contain processing instructions with that name.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.propertyIsEnumerable(System.String)">
            <summary>
            Checks whether the property p is in the set of properties that can be iterated in a for..in statement applied to the XMLList object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.text">
            <summary>
            Calls the text() method of each XML object and returns an XMLList object that contains the results.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.toXMLString">
            <summary>
            Returns a string representation of all the XML objects in an XMLList object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.valueOf">
            <summary>
            Returns the XMLList object.
            </summary>
        </member>
        <member name="M:flash.Global.XMLList.#ctor(System.Object)">
            <summary>
            Creates a new XMLList object.
            </summary>
        </member>
        <member name="M:System.String.Concat(System.Object)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            Just for compatibility with C# compiler. DO NOT USE
            </summary>
        </member>
        <member name="M:flash.Global.Reflection.getQualifiedClassName(System.Object)">
            <summary>
            Returns the fully qualified class name of an object.
            </summary>
            <param name="pClass">The object for which a fully qualified class name is desired. Any ActionScript value may be passed to this method including all available ActionScript types, object instances, primitive types such as <c>uint</c>, and class objects.</param>
            <returns>A string containing the fully qualified class name.</returns>
        </member>
        <member name="F:flash.events.ProgressEvent.PROGRESS">
            <summary>
            Defines the value of the type property of a progress event object.
            </summary>
        </member>
        <member name="F:flash.events.ProgressEvent.SOCKET_DATA">
            <summary>
            Defines the value of the type property of a socketData event object.
            </summary>
        </member>
        <member name="P:flash.events.ProgressEvent.bytesLoaded">
            <summary>
            The number of items or bytes loaded when the listener processes the event.
            </summary>
        </member>
        <member name="P:flash.events.ProgressEvent.bytesTotal">
            <summary>
            The total number of items or bytes that will be loaded if the loading process succeeds.
            </summary>
        </member>
        <member name="F:flash.events.FullScreenEvent.FULL_SCREEN">
            <summary>
            The <see cref="T:flash.events.FullScreenEvent"/>.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.
            </summary>
        </member>
        <member name="F:flash.events.FullScreenEvent.fullScreen">
            <summary>
            Indicates whether the Stage object is in full-screen mode (true) or not (false).
            </summary>
        </member>
    </members>
</doc>
